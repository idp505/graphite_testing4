/**
 */
package pcs.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import pcs.util.PcsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PcsItemProviderAdapterFactory extends PcsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PcsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcs.Deployment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeploymentItemProvider deploymentItemProvider;

	/**
	 * This creates an adapter for a {@link pcs.Deployment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeploymentAdapter() {
		if (deploymentItemProvider == null) {
			deploymentItemProvider = new DeploymentItemProvider(this);
		}

		return deploymentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcs.Environment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnvironmentItemProvider environmentItemProvider;

	/**
	 * This creates an adapter for a {@link pcs.Environment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnvironmentAdapter() {
		if (environmentItemProvider == null) {
			environmentItemProvider = new EnvironmentItemProvider(this);
		}

		return environmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcs.SnapshotPolicy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SnapshotPolicyItemProvider snapshotPolicyItemProvider;

	/**
	 * This creates an adapter for a {@link pcs.SnapshotPolicy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSnapshotPolicyAdapter() {
		if (snapshotPolicyItemProvider == null) {
			snapshotPolicyItemProvider = new SnapshotPolicyItemProvider(this);
		}

		return snapshotPolicyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcs.SnapMirror} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SnapMirrorItemProvider snapMirrorItemProvider;

	/**
	 * This creates an adapter for a {@link pcs.SnapMirror}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSnapMirrorAdapter() {
		if (snapMirrorItemProvider == null) {
			snapMirrorItemProvider = new SnapMirrorItemProvider(this);
		}

		return snapMirrorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcs.ReplicationPolicy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplicationPolicyItemProvider replicationPolicyItemProvider;

	/**
	 * This creates an adapter for a {@link pcs.ReplicationPolicy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplicationPolicyAdapter() {
		if (replicationPolicyItemProvider == null) {
			replicationPolicyItemProvider = new ReplicationPolicyItemProvider(this);
		}

		return replicationPolicyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcs.CloudTiering} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CloudTieringItemProvider cloudTieringItemProvider;

	/**
	 * This creates an adapter for a {@link pcs.CloudTiering}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCloudTieringAdapter() {
		if (cloudTieringItemProvider == null) {
			cloudTieringItemProvider = new CloudTieringItemProvider(this);
		}

		return cloudTieringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcs.CloudBackup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CloudBackupItemProvider cloudBackupItemProvider;

	/**
	 * This creates an adapter for a {@link pcs.CloudBackup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCloudBackupAdapter() {
		if (cloudBackupItemProvider == null) {
			cloudBackupItemProvider = new CloudBackupItemProvider(this);
		}

		return cloudBackupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcs.CVO} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CVOItemProvider cvoItemProvider;

	/**
	 * This creates an adapter for a {@link pcs.CVO}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCVOAdapter() {
		if (cvoItemProvider == null) {
			cvoItemProvider = new CVOItemProvider(this);
		}

		return cvoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcs.CVO_HA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CVO_HAItemProvider cvO_HAItemProvider;

	/**
	 * This creates an adapter for a {@link pcs.CVO_HA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCVO_HAAdapter() {
		if (cvO_HAItemProvider == null) {
			cvO_HAItemProvider = new CVO_HAItemProvider(this);
		}

		return cvO_HAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcs.AWSNetworking} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AWSNetworkingItemProvider awsNetworkingItemProvider;

	/**
	 * This creates an adapter for a {@link pcs.AWSNetworking}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAWSNetworkingAdapter() {
		if (awsNetworkingItemProvider == null) {
			awsNetworkingItemProvider = new AWSNetworkingItemProvider(this);
		}

		return awsNetworkingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcs.AWSNetworkingHA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AWSNetworkingHAItemProvider awsNetworkingHAItemProvider;

	/**
	 * This creates an adapter for a {@link pcs.AWSNetworkingHA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAWSNetworkingHAAdapter() {
		if (awsNetworkingHAItemProvider == null) {
			awsNetworkingHAItemProvider = new AWSNetworkingHAItemProvider(this);
		}

		return awsNetworkingHAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pcs.Volume} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VolumeItemProvider volumeItemProvider;

	/**
	 * This creates an adapter for a {@link pcs.Volume}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVolumeAdapter() {
		if (volumeItemProvider == null) {
			volumeItemProvider = new VolumeItemProvider(this);
		}

		return volumeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (deploymentItemProvider != null) deploymentItemProvider.dispose();
		if (environmentItemProvider != null) environmentItemProvider.dispose();
		if (snapshotPolicyItemProvider != null) snapshotPolicyItemProvider.dispose();
		if (snapMirrorItemProvider != null) snapMirrorItemProvider.dispose();
		if (replicationPolicyItemProvider != null) replicationPolicyItemProvider.dispose();
		if (cloudTieringItemProvider != null) cloudTieringItemProvider.dispose();
		if (cloudBackupItemProvider != null) cloudBackupItemProvider.dispose();
		if (cvoItemProvider != null) cvoItemProvider.dispose();
		if (cvO_HAItemProvider != null) cvO_HAItemProvider.dispose();
		if (awsNetworkingItemProvider != null) awsNetworkingItemProvider.dispose();
		if (awsNetworkingHAItemProvider != null) awsNetworkingHAItemProvider.dispose();
		if (volumeItemProvider != null) volumeItemProvider.dispose();
	}

}

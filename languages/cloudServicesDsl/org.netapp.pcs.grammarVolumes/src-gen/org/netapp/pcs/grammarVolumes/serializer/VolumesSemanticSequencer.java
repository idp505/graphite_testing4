/*
 * generated by Xtext 2.36.0
 */
package org.netapp.pcs.grammarVolumes.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.netapp.pcs.grammarVolumes.services.VolumesGrammarAccess;
import pcs.CVO;
import pcs.PcsPackage;
import pcs.Volume;

@SuppressWarnings("all")
public class VolumesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private VolumesGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PcsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PcsPackage.CVO:
				sequence_CVO(context, (CVO) semanticObject); 
				return; 
			case PcsPackage.VOLUME:
				sequence_Volume(context, (Volume) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     CVO returns CVO
	 *
	 * Constraint:
	 *     (volumes+=Volume volumes+=Volume*)?
	 * </pre>
	 */
	protected void sequence_CVO(ISerializationContext context, CVO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Volume returns Volume
	 *
	 * Constraint:
	 *     (
	 *         name=EString? 
	 *         identifier=EString? 
	 *         state=EString? 
	 *         size=EDouble? 
	 *         size_unit=EString? 
	 *         svm_name=EString? 
	 *         export_policy_type=EString? 
	 *         (export_policy_ip+=EString export_policy_ip+=EString*)? 
	 *         (export_policy_nfs_version+=EString export_policy_nfs_version+=EString*)? 
	 *         snapshot_policy=[SnapshotPolicy|ID]? 
	 *         environment=[Environment|ID]?
	 *     )
	 * </pre>
	 */
	protected void sequence_Volume(ISerializationContext context, Volume semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

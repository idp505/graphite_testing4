/*
 * generated by Xtext 2.36.0
 */
package org.netapp.pcs.grammarVolumes.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class VolumesGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class CVOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.netapp.pcs.grammarVolumes.Volumes.CVO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCVOAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVolumesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVolumesVolumeParserRuleCall_2_0_0 = (RuleCall)cVolumesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cVolumesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cVolumesVolumeParserRuleCall_2_1_1_0 = (RuleCall)cVolumesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CVO returns CVO:
		//    {CVO}
		//    '{' (volumes+=Volume ( "," volumes+=Volume)*)? '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{CVO}
		//'{' (volumes+=Volume ( "," volumes+=Volume)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{CVO}
		public Action getCVOAction_0() { return cCVOAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(volumes+=Volume ( "," volumes+=Volume)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//volumes+=Volume
		public Assignment getVolumesAssignment_2_0() { return cVolumesAssignment_2_0; }
		
		//Volume
		public RuleCall getVolumesVolumeParserRuleCall_2_0_0() { return cVolumesVolumeParserRuleCall_2_0_0; }
		
		//( "," volumes+=Volume)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//volumes+=Volume
		public Assignment getVolumesAssignment_2_1_1() { return cVolumesAssignment_2_1_1; }
		
		//Volume
		public RuleCall getVolumesVolumeParserRuleCall_2_1_1_0() { return cVolumesVolumeParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class VolumeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.netapp.pcs.grammarVolumes.Volumes.Volume");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVolumeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIdentifierKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIdentifierAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cIdentifierEStringParserRuleCall_3_2_0 = (RuleCall)cIdentifierAssignment_3_2.eContents().get(0);
		private final Keyword cCommaKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStateKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cStateAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cStateEStringParserRuleCall_4_2_0 = (RuleCall)cStateAssignment_4_2.eContents().get(0);
		private final Keyword cCommaKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSizeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cSizeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cSizeEDoubleParserRuleCall_5_2_0 = (RuleCall)cSizeAssignment_5_2.eContents().get(0);
		private final Keyword cCommaKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSize_unitKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cSize_unitAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cSize_unitEStringParserRuleCall_6_2_0 = (RuleCall)cSize_unitAssignment_6_2.eContents().get(0);
		private final Keyword cCommaKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSvm_nameKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cColonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cSvm_nameAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cSvm_nameEStringParserRuleCall_7_2_0 = (RuleCall)cSvm_nameAssignment_7_2.eContents().get(0);
		private final Keyword cCommaKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cExport_policy_typeKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cColonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cExport_policy_typeAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cExport_policy_typeEStringParserRuleCall_8_2_0 = (RuleCall)cExport_policy_typeAssignment_8_2.eContents().get(0);
		private final Keyword cCommaKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cExport_policy_ipKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cColonKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cExport_policy_ipAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cExport_policy_ipEStringParserRuleCall_9_3_0 = (RuleCall)cExport_policy_ipAssignment_9_3.eContents().get(0);
		private final Group cGroup_9_4 = (Group)cGroup_9.eContents().get(4);
		private final Keyword cCommaKeyword_9_4_0 = (Keyword)cGroup_9_4.eContents().get(0);
		private final Assignment cExport_policy_ipAssignment_9_4_1 = (Assignment)cGroup_9_4.eContents().get(1);
		private final RuleCall cExport_policy_ipEStringParserRuleCall_9_4_1_0 = (RuleCall)cExport_policy_ipAssignment_9_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_5 = (Keyword)cGroup_9.eContents().get(5);
		private final Keyword cCommaKeyword_9_6 = (Keyword)cGroup_9.eContents().get(6);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cExport_policy_nfs_versionKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cColonKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cExport_policy_nfs_versionAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cExport_policy_nfs_versionEStringParserRuleCall_10_3_0 = (RuleCall)cExport_policy_nfs_versionAssignment_10_3.eContents().get(0);
		private final Group cGroup_10_4 = (Group)cGroup_10.eContents().get(4);
		private final Keyword cCommaKeyword_10_4_0 = (Keyword)cGroup_10_4.eContents().get(0);
		private final Assignment cExport_policy_nfs_versionAssignment_10_4_1 = (Assignment)cGroup_10_4.eContents().get(1);
		private final RuleCall cExport_policy_nfs_versionEStringParserRuleCall_10_4_1_0 = (RuleCall)cExport_policy_nfs_versionAssignment_10_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_5 = (Keyword)cGroup_10.eContents().get(5);
		private final Keyword cCommaKeyword_10_6 = (Keyword)cGroup_10.eContents().get(6);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cSnapshot_policyKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cColonKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cSnapshot_policyAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final CrossReference cSnapshot_policySnapshotPolicyCrossReference_11_2_0 = (CrossReference)cSnapshot_policyAssignment_11_2.eContents().get(0);
		private final RuleCall cSnapshot_policySnapshotPolicyIDTerminalRuleCall_11_2_0_1 = (RuleCall)cSnapshot_policySnapshotPolicyCrossReference_11_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_11_3 = (Keyword)cGroup_11.eContents().get(3);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cEnvironmentKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cColonKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cEnvironmentAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final CrossReference cEnvironmentEnvironmentCrossReference_12_2_0 = (CrossReference)cEnvironmentAssignment_12_2.eContents().get(0);
		private final RuleCall cEnvironmentEnvironmentIDTerminalRuleCall_12_2_0_1 = (RuleCall)cEnvironmentEnvironmentCrossReference_12_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Volume returns Volume:
		//    {Volume}
		//    '{'
		//        ('name' ':' name=EString ',')?
		//        ('identifier' ':' identifier=EString ',')?
		//        ('state' ':' state=EString ',')?
		//        ('size' ':' size=EDouble ',')?
		//        ('size_unit' ':' size_unit=EString ',')?
		//        ('svm_name' ':' svm_name=EString ',')?
		//        ('export_policy_type' ':' export_policy_type=EString ',')?
		//        ('export_policy_ip' ':' '{' export_policy_ip+=EString ( "," export_policy_ip+=EString)* '}' ',')?
		//        ('export_policy_nfs_version' ':' '{' export_policy_nfs_version+=EString ( "," export_policy_nfs_version+=EString)* '}' ',')?
		//        ('snapshot_policy' ':' snapshot_policy=[SnapshotPolicy]  ',')?
		//        ('environment' ':' environment=[Environment])?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Volume}
		//'{'
		//    ('name' ':' name=EString ',')?
		//    ('identifier' ':' identifier=EString ',')?
		//    ('state' ':' state=EString ',')?
		//    ('size' ':' size=EDouble ',')?
		//    ('size_unit' ':' size_unit=EString ',')?
		//    ('svm_name' ':' svm_name=EString ',')?
		//    ('export_policy_type' ':' export_policy_type=EString ',')?
		//    ('export_policy_ip' ':' '{' export_policy_ip+=EString ( "," export_policy_ip+=EString)* '}' ',')?
		//    ('export_policy_nfs_version' ':' '{' export_policy_nfs_version+=EString ( "," export_policy_nfs_version+=EString)* '}' ',')?
		//    ('snapshot_policy' ':' snapshot_policy=[SnapshotPolicy]  ',')?
		//    ('environment' ':' environment=[Environment])?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Volume}
		public Action getVolumeAction_0() { return cVolumeAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('name' ':' name=EString ',')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'name'
		public Keyword getNameKeyword_2_0() { return cNameKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//name=EString
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_2_0() { return cNameEStringParserRuleCall_2_2_0; }
		
		//','
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }
		
		//('identifier' ':' identifier=EString ',')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'identifier'
		public Keyword getIdentifierKeyword_3_0() { return cIdentifierKeyword_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//identifier=EString
		public Assignment getIdentifierAssignment_3_2() { return cIdentifierAssignment_3_2; }
		
		//EString
		public RuleCall getIdentifierEStringParserRuleCall_3_2_0() { return cIdentifierEStringParserRuleCall_3_2_0; }
		
		//','
		public Keyword getCommaKeyword_3_3() { return cCommaKeyword_3_3; }
		
		//('state' ':' state=EString ',')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'state'
		public Keyword getStateKeyword_4_0() { return cStateKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//state=EString
		public Assignment getStateAssignment_4_2() { return cStateAssignment_4_2; }
		
		//EString
		public RuleCall getStateEStringParserRuleCall_4_2_0() { return cStateEStringParserRuleCall_4_2_0; }
		
		//','
		public Keyword getCommaKeyword_4_3() { return cCommaKeyword_4_3; }
		
		//('size' ':' size=EDouble ',')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'size'
		public Keyword getSizeKeyword_5_0() { return cSizeKeyword_5_0; }
		
		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//size=EDouble
		public Assignment getSizeAssignment_5_2() { return cSizeAssignment_5_2; }
		
		//EDouble
		public RuleCall getSizeEDoubleParserRuleCall_5_2_0() { return cSizeEDoubleParserRuleCall_5_2_0; }
		
		//','
		public Keyword getCommaKeyword_5_3() { return cCommaKeyword_5_3; }
		
		//('size_unit' ':' size_unit=EString ',')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'size_unit'
		public Keyword getSize_unitKeyword_6_0() { return cSize_unitKeyword_6_0; }
		
		//':'
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }
		
		//size_unit=EString
		public Assignment getSize_unitAssignment_6_2() { return cSize_unitAssignment_6_2; }
		
		//EString
		public RuleCall getSize_unitEStringParserRuleCall_6_2_0() { return cSize_unitEStringParserRuleCall_6_2_0; }
		
		//','
		public Keyword getCommaKeyword_6_3() { return cCommaKeyword_6_3; }
		
		//('svm_name' ':' svm_name=EString ',')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'svm_name'
		public Keyword getSvm_nameKeyword_7_0() { return cSvm_nameKeyword_7_0; }
		
		//':'
		public Keyword getColonKeyword_7_1() { return cColonKeyword_7_1; }
		
		//svm_name=EString
		public Assignment getSvm_nameAssignment_7_2() { return cSvm_nameAssignment_7_2; }
		
		//EString
		public RuleCall getSvm_nameEStringParserRuleCall_7_2_0() { return cSvm_nameEStringParserRuleCall_7_2_0; }
		
		//','
		public Keyword getCommaKeyword_7_3() { return cCommaKeyword_7_3; }
		
		//('export_policy_type' ':' export_policy_type=EString ',')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'export_policy_type'
		public Keyword getExport_policy_typeKeyword_8_0() { return cExport_policy_typeKeyword_8_0; }
		
		//':'
		public Keyword getColonKeyword_8_1() { return cColonKeyword_8_1; }
		
		//export_policy_type=EString
		public Assignment getExport_policy_typeAssignment_8_2() { return cExport_policy_typeAssignment_8_2; }
		
		//EString
		public RuleCall getExport_policy_typeEStringParserRuleCall_8_2_0() { return cExport_policy_typeEStringParserRuleCall_8_2_0; }
		
		//','
		public Keyword getCommaKeyword_8_3() { return cCommaKeyword_8_3; }
		
		//('export_policy_ip' ':' '{' export_policy_ip+=EString ( "," export_policy_ip+=EString)* '}' ',')?
		public Group getGroup_9() { return cGroup_9; }
		
		//'export_policy_ip'
		public Keyword getExport_policy_ipKeyword_9_0() { return cExport_policy_ipKeyword_9_0; }
		
		//':'
		public Keyword getColonKeyword_9_1() { return cColonKeyword_9_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9_2() { return cLeftCurlyBracketKeyword_9_2; }
		
		//export_policy_ip+=EString
		public Assignment getExport_policy_ipAssignment_9_3() { return cExport_policy_ipAssignment_9_3; }
		
		//EString
		public RuleCall getExport_policy_ipEStringParserRuleCall_9_3_0() { return cExport_policy_ipEStringParserRuleCall_9_3_0; }
		
		//( "," export_policy_ip+=EString)*
		public Group getGroup_9_4() { return cGroup_9_4; }
		
		//","
		public Keyword getCommaKeyword_9_4_0() { return cCommaKeyword_9_4_0; }
		
		//export_policy_ip+=EString
		public Assignment getExport_policy_ipAssignment_9_4_1() { return cExport_policy_ipAssignment_9_4_1; }
		
		//EString
		public RuleCall getExport_policy_ipEStringParserRuleCall_9_4_1_0() { return cExport_policy_ipEStringParserRuleCall_9_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9_5() { return cRightCurlyBracketKeyword_9_5; }
		
		//','
		public Keyword getCommaKeyword_9_6() { return cCommaKeyword_9_6; }
		
		//('export_policy_nfs_version' ':' '{' export_policy_nfs_version+=EString ( "," export_policy_nfs_version+=EString)* '}' ',')?
		public Group getGroup_10() { return cGroup_10; }
		
		//'export_policy_nfs_version'
		public Keyword getExport_policy_nfs_versionKeyword_10_0() { return cExport_policy_nfs_versionKeyword_10_0; }
		
		//':'
		public Keyword getColonKeyword_10_1() { return cColonKeyword_10_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10_2() { return cLeftCurlyBracketKeyword_10_2; }
		
		//export_policy_nfs_version+=EString
		public Assignment getExport_policy_nfs_versionAssignment_10_3() { return cExport_policy_nfs_versionAssignment_10_3; }
		
		//EString
		public RuleCall getExport_policy_nfs_versionEStringParserRuleCall_10_3_0() { return cExport_policy_nfs_versionEStringParserRuleCall_10_3_0; }
		
		//( "," export_policy_nfs_version+=EString)*
		public Group getGroup_10_4() { return cGroup_10_4; }
		
		//","
		public Keyword getCommaKeyword_10_4_0() { return cCommaKeyword_10_4_0; }
		
		//export_policy_nfs_version+=EString
		public Assignment getExport_policy_nfs_versionAssignment_10_4_1() { return cExport_policy_nfs_versionAssignment_10_4_1; }
		
		//EString
		public RuleCall getExport_policy_nfs_versionEStringParserRuleCall_10_4_1_0() { return cExport_policy_nfs_versionEStringParserRuleCall_10_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10_5() { return cRightCurlyBracketKeyword_10_5; }
		
		//','
		public Keyword getCommaKeyword_10_6() { return cCommaKeyword_10_6; }
		
		//('snapshot_policy' ':' snapshot_policy=[SnapshotPolicy]  ',')?
		public Group getGroup_11() { return cGroup_11; }
		
		//'snapshot_policy'
		public Keyword getSnapshot_policyKeyword_11_0() { return cSnapshot_policyKeyword_11_0; }
		
		//':'
		public Keyword getColonKeyword_11_1() { return cColonKeyword_11_1; }
		
		//snapshot_policy=[SnapshotPolicy]
		public Assignment getSnapshot_policyAssignment_11_2() { return cSnapshot_policyAssignment_11_2; }
		
		//[SnapshotPolicy]
		public CrossReference getSnapshot_policySnapshotPolicyCrossReference_11_2_0() { return cSnapshot_policySnapshotPolicyCrossReference_11_2_0; }
		
		//ID
		public RuleCall getSnapshot_policySnapshotPolicyIDTerminalRuleCall_11_2_0_1() { return cSnapshot_policySnapshotPolicyIDTerminalRuleCall_11_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_11_3() { return cCommaKeyword_11_3; }
		
		//('environment' ':' environment=[Environment])?
		public Group getGroup_12() { return cGroup_12; }
		
		//'environment'
		public Keyword getEnvironmentKeyword_12_0() { return cEnvironmentKeyword_12_0; }
		
		//':'
		public Keyword getColonKeyword_12_1() { return cColonKeyword_12_1; }
		
		//environment=[Environment]
		public Assignment getEnvironmentAssignment_12_2() { return cEnvironmentAssignment_12_2; }
		
		//[Environment]
		public CrossReference getEnvironmentEnvironmentCrossReference_12_2_0() { return cEnvironmentEnvironmentCrossReference_12_2_0; }
		
		//ID
		public RuleCall getEnvironmentEnvironmentIDTerminalRuleCall_12_2_0_1() { return cEnvironmentEnvironmentIDTerminalRuleCall_12_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.netapp.pcs.grammarVolumes.Volumes.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.netapp.pcs.grammarVolumes.Volumes.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_2_2_0 = (Alternatives)cGroup_2_2.eContents().get(0);
		private final Keyword cEKeyword_2_2_0_0 = (Keyword)cAlternatives_2_2_0.eContents().get(0);
		private final Keyword cEKeyword_2_2_0_1 = (Keyword)cAlternatives_2_2_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2_2_2 = (RuleCall)cGroup_2_2.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//    '-'? INT? ('.' INT (('E'|'e') '-'? INT)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? ('.' INT (('E'|'e') '-'? INT)?)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//('.' INT (('E'|'e') '-'? INT)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//('E'|'e')
		public Alternatives getAlternatives_2_2_0() { return cAlternatives_2_2_0; }
		
		//'E'
		public Keyword getEKeyword_2_2_0_0() { return cEKeyword_2_2_0_0; }
		
		//'e'
		public Keyword getEKeyword_2_2_0_1() { return cEKeyword_2_2_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_2_2_1() { return cHyphenMinusKeyword_2_2_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_2_2() { return cINTTerminalRuleCall_2_2_2; }
	}
	
	
	private final CVOElements pCVO;
	private final VolumeElements pVolume;
	private final EStringElements pEString;
	private final EDoubleElements pEDouble;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VolumesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCVO = new CVOElements();
		this.pVolume = new VolumeElements();
		this.pEString = new EStringElements();
		this.pEDouble = new EDoubleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.netapp.pcs.grammarVolumes.Volumes".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CVO returns CVO:
	//    {CVO}
	//    '{' (volumes+=Volume ( "," volumes+=Volume)*)? '}'
	//    ;
	public CVOElements getCVOAccess() {
		return pCVO;
	}
	
	public ParserRule getCVORule() {
		return getCVOAccess().getRule();
	}
	
	//Volume returns Volume:
	//    {Volume}
	//    '{'
	//        ('name' ':' name=EString ',')?
	//        ('identifier' ':' identifier=EString ',')?
	//        ('state' ':' state=EString ',')?
	//        ('size' ':' size=EDouble ',')?
	//        ('size_unit' ':' size_unit=EString ',')?
	//        ('svm_name' ':' svm_name=EString ',')?
	//        ('export_policy_type' ':' export_policy_type=EString ',')?
	//        ('export_policy_ip' ':' '{' export_policy_ip+=EString ( "," export_policy_ip+=EString)* '}' ',')?
	//        ('export_policy_nfs_version' ':' '{' export_policy_nfs_version+=EString ( "," export_policy_nfs_version+=EString)* '}' ',')?
	//        ('snapshot_policy' ':' snapshot_policy=[SnapshotPolicy]  ',')?
	//        ('environment' ':' environment=[Environment])?
	//    '}';
	public VolumeElements getVolumeAccess() {
		return pVolume;
	}
	
	public ParserRule getVolumeRule() {
		return getVolumeAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EDouble returns ecore::EDouble:
	//    '-'? INT? ('.' INT (('E'|'e') '-'? INT)?)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

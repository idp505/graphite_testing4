/*
 * generated by Xtext 2.36.0
 */
package org.netapp.pcs.grammarSnapMirror.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.netapp.pcs.grammarSnapMirror.ide.contentassist.antlr.internal.InternalReplicationMappingsParser;
import org.netapp.pcs.grammarSnapMirror.services.ReplicationMappingsGrammarAccess;

public class ReplicationMappingsParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ReplicationMappingsGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ReplicationMappingsGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getReplicationMappingsAccess().getAlternatives_2(), "rule__ReplicationMappings__Alternatives_2");
			builder.put(grammarAccess.getReplicationPolicyAccess().getGroup(), "rule__ReplicationPolicy__Group__0");
			builder.put(grammarAccess.getReplicationPolicyAccess().getGroup_2(), "rule__ReplicationPolicy__Group_2__0");
			builder.put(grammarAccess.getReplicationMappingsAccess().getGroup(), "rule__ReplicationMappings__Group__0");
			builder.put(grammarAccess.getReplicationMappingsAccess().getGroup_1(), "rule__ReplicationMappings__Group_1__0");
			builder.put(grammarAccess.getReplicationMappingsAccess().getGroup_3(), "rule__ReplicationMappings__Group_3__0");
			builder.put(grammarAccess.getReplicationMappingsAccess().getGroup_4(), "rule__ReplicationMappings__Group_4__0");
			builder.put(grammarAccess.getReplicationMappingsAccess().getGroup_4_1(), "rule__ReplicationMappings__Group_4_1__0");
			builder.put(grammarAccess.getReplicationMappingsAccess().getGroup_4_2(), "rule__ReplicationMappings__Group_4_2__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getReplicationPolicyAccess().getReplication_mappingsAssignment_1(), "rule__ReplicationPolicy__Replication_mappingsAssignment_1");
			builder.put(grammarAccess.getReplicationPolicyAccess().getReplication_mappingsAssignment_2_1(), "rule__ReplicationPolicy__Replication_mappingsAssignment_2_1");
			builder.put(grammarAccess.getReplicationMappingsAccess().getSource_cvoAssignment_1_0(), "rule__ReplicationMappings__Source_cvoAssignment_1_0");
			builder.put(grammarAccess.getReplicationMappingsAccess().getSource_volumeAssignment_1_2(), "rule__ReplicationMappings__Source_volumeAssignment_1_2");
			builder.put(grammarAccess.getReplicationMappingsAccess().getBidirectionalAssignment_2_1(), "rule__ReplicationMappings__BidirectionalAssignment_2_1");
			builder.put(grammarAccess.getReplicationMappingsAccess().getDestination_cvoAssignment_3_0(), "rule__ReplicationMappings__Destination_cvoAssignment_3_0");
			builder.put(grammarAccess.getReplicationMappingsAccess().getDestination_volumeAssignment_3_2(), "rule__ReplicationMappings__Destination_volumeAssignment_3_2");
			builder.put(grammarAccess.getReplicationMappingsAccess().getPolicyAssignment_4_1_2(), "rule__ReplicationMappings__PolicyAssignment_4_1_2");
			builder.put(grammarAccess.getReplicationMappingsAccess().getMax_transfer_rateAssignment_4_2_2(), "rule__ReplicationMappings__Max_transfer_rateAssignment_4_2_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ReplicationMappingsGrammarAccess grammarAccess;

	@Override
	protected InternalReplicationMappingsParser createParser() {
		InternalReplicationMappingsParser result = new InternalReplicationMappingsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ReplicationMappingsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ReplicationMappingsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}

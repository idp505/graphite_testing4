/*
 * generated by Xtext 2.36.0
 */
package org.netapp.pcs.grammarSnapMirror.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.netapp.pcs.grammarSnapMirror.services.ReplicationMappingsGrammarAccess;
import pcs.PcsPackage;
import pcs.ReplicationPolicy;
import pcs.SnapMirror;

@SuppressWarnings("all")
public class ReplicationMappingsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ReplicationMappingsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PcsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PcsPackage.REPLICATION_POLICY:
				sequence_ReplicationPolicy(context, (ReplicationPolicy) semanticObject); 
				return; 
			case PcsPackage.SNAP_MIRROR:
				sequence_ReplicationMappings(context, (SnapMirror) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReplicationMappings returns SnapMirror
	 *
	 * Constraint:
	 *     (
	 *         (source_cvo=[CVO|ID] source_volume=[Volume|ID]?)? 
	 *         bidirectional?='&lt;-&gt;'? 
	 *         (destination_cvo=[CVO|ID] destination_volume=[Volume|ID]?)? 
	 *         policy=[SnapshotPolicy|ID]? 
	 *         max_transfer_rate=EInt?
	 *     )
	 * </pre>
	 */
	protected void sequence_ReplicationMappings(ISerializationContext context, SnapMirror semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReplicationPolicy returns ReplicationPolicy
	 *
	 * Constraint:
	 *     (replication_mappings+=ReplicationMappings replication_mappings+=ReplicationMappings*)
	 * </pre>
	 */
	protected void sequence_ReplicationPolicy(ISerializationContext context, ReplicationPolicy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

/*
 * generated by Xtext 2.36.0
 */
package org.netapp.pcs.grammarSnapMirror.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ReplicationMappingsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ReplicationPolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.netapp.pcs.grammarSnapMirror.ReplicationMappings.ReplicationPolicy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReplicationPolicyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReplication_mappingsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReplication_mappingsReplicationMappingsParserRuleCall_1_0 = (RuleCall)cReplication_mappingsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cNEWLINETerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cReplication_mappingsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cReplication_mappingsReplicationMappingsParserRuleCall_2_1_0 = (RuleCall)cReplication_mappingsAssignment_2_1.eContents().get(0);
		
		//ReplicationPolicy returns ReplicationPolicy:
		//    {ReplicationPolicy}
		//    replication_mappings+=ReplicationMappings (NEWLINE replication_mappings+=ReplicationMappings)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReplicationPolicy}
		//replication_mappings+=ReplicationMappings (NEWLINE replication_mappings+=ReplicationMappings)*
		public Group getGroup() { return cGroup; }
		
		//{ReplicationPolicy}
		public Action getReplicationPolicyAction_0() { return cReplicationPolicyAction_0; }
		
		//replication_mappings+=ReplicationMappings
		public Assignment getReplication_mappingsAssignment_1() { return cReplication_mappingsAssignment_1; }
		
		//ReplicationMappings
		public RuleCall getReplication_mappingsReplicationMappingsParserRuleCall_1_0() { return cReplication_mappingsReplicationMappingsParserRuleCall_1_0; }
		
		//(NEWLINE replication_mappings+=ReplicationMappings)*
		public Group getGroup_2() { return cGroup_2; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_2_0() { return cNEWLINETerminalRuleCall_2_0; }
		
		//replication_mappings+=ReplicationMappings
		public Assignment getReplication_mappingsAssignment_2_1() { return cReplication_mappingsAssignment_2_1; }
		
		//ReplicationMappings
		public RuleCall getReplication_mappingsReplicationMappingsParserRuleCall_2_1_0() { return cReplication_mappingsReplicationMappingsParserRuleCall_2_1_0; }
	}
	public class ReplicationMappingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.netapp.pcs.grammarSnapMirror.ReplicationMappings.ReplicationMappings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSnapMirrorAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSource_cvoAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cSource_cvoCVOCrossReference_1_0_0 = (CrossReference)cSource_cvoAssignment_1_0.eContents().get(0);
		private final RuleCall cSource_cvoCVOIDTerminalRuleCall_1_0_0_1 = (RuleCall)cSource_cvoCVOCrossReference_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSource_volumeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cSource_volumeVolumeCrossReference_1_2_0 = (CrossReference)cSource_volumeAssignment_1_2.eContents().get(0);
		private final RuleCall cSource_volumeVolumeIDTerminalRuleCall_1_2_0_1 = (RuleCall)cSource_volumeVolumeCrossReference_1_2_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cBidirectionalAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cBidirectionalLessThanSignHyphenMinusGreaterThanSignKeyword_2_1_0 = (Keyword)cBidirectionalAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDestination_cvoAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cDestination_cvoCVOCrossReference_3_0_0 = (CrossReference)cDestination_cvoAssignment_3_0.eContents().get(0);
		private final RuleCall cDestination_cvoCVOIDTerminalRuleCall_3_0_0_1 = (RuleCall)cDestination_cvoCVOCrossReference_3_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cDestination_volumeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cDestination_volumeVolumeCrossReference_3_2_0 = (CrossReference)cDestination_volumeAssignment_3_2.eContents().get(0);
		private final RuleCall cDestination_volumeVolumeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cDestination_volumeVolumeCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cPolicyKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Keyword cColonKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cPolicyAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final CrossReference cPolicySnapshotPolicyCrossReference_4_1_2_0 = (CrossReference)cPolicyAssignment_4_1_2.eContents().get(0);
		private final RuleCall cPolicySnapshotPolicyIDTerminalRuleCall_4_1_2_0_1 = (RuleCall)cPolicySnapshotPolicyCrossReference_4_1_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_3 = (Keyword)cGroup_4_1.eContents().get(3);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cMax_transfer_rateKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Keyword cColonKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Assignment cMax_transfer_rateAssignment_4_2_2 = (Assignment)cGroup_4_2.eContents().get(2);
		private final RuleCall cMax_transfer_rateEIntParserRuleCall_4_2_2_0 = (RuleCall)cMax_transfer_rateAssignment_4_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//ReplicationMappings returns SnapMirror:
		//    {SnapMirror}
		//    (source_cvo=[CVO]  '.' (source_volume=[Volume])?)? ('->' | bidirectional?='<->') (destination_cvo=[CVO]  '.' (destination_volume=[Volume])?)?
		//    ('{' ('policy' ':' policy=[SnapshotPolicy] ',')? ('max_transfer_rate' ':' max_transfer_rate=EInt)? '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SnapMirror}
		//(source_cvo=[CVO]  '.' (source_volume=[Volume])?)? ('->' | bidirectional?='<->') (destination_cvo=[CVO]  '.' (destination_volume=[Volume])?)?
		//('{' ('policy' ':' policy=[SnapshotPolicy] ',')? ('max_transfer_rate' ':' max_transfer_rate=EInt)? '}')?
		public Group getGroup() { return cGroup; }
		
		//{SnapMirror}
		public Action getSnapMirrorAction_0() { return cSnapMirrorAction_0; }
		
		//(source_cvo=[CVO]  '.' (source_volume=[Volume])?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//source_cvo=[CVO]
		public Assignment getSource_cvoAssignment_1_0() { return cSource_cvoAssignment_1_0; }
		
		//[CVO]
		public CrossReference getSource_cvoCVOCrossReference_1_0_0() { return cSource_cvoCVOCrossReference_1_0_0; }
		
		//ID
		public RuleCall getSource_cvoCVOIDTerminalRuleCall_1_0_0_1() { return cSource_cvoCVOIDTerminalRuleCall_1_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//(source_volume=[Volume])?
		public Assignment getSource_volumeAssignment_1_2() { return cSource_volumeAssignment_1_2; }
		
		//[Volume]
		public CrossReference getSource_volumeVolumeCrossReference_1_2_0() { return cSource_volumeVolumeCrossReference_1_2_0; }
		
		//ID
		public RuleCall getSource_volumeVolumeIDTerminalRuleCall_1_2_0_1() { return cSource_volumeVolumeIDTerminalRuleCall_1_2_0_1; }
		
		//('->' | bidirectional?='<->')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0() { return cHyphenMinusGreaterThanSignKeyword_2_0; }
		
		//bidirectional?='<->'
		public Assignment getBidirectionalAssignment_2_1() { return cBidirectionalAssignment_2_1; }
		
		//'<->'
		public Keyword getBidirectionalLessThanSignHyphenMinusGreaterThanSignKeyword_2_1_0() { return cBidirectionalLessThanSignHyphenMinusGreaterThanSignKeyword_2_1_0; }
		
		//(destination_cvo=[CVO]  '.' (destination_volume=[Volume])?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//destination_cvo=[CVO]
		public Assignment getDestination_cvoAssignment_3_0() { return cDestination_cvoAssignment_3_0; }
		
		//[CVO]
		public CrossReference getDestination_cvoCVOCrossReference_3_0_0() { return cDestination_cvoCVOCrossReference_3_0_0; }
		
		//ID
		public RuleCall getDestination_cvoCVOIDTerminalRuleCall_3_0_0_1() { return cDestination_cvoCVOIDTerminalRuleCall_3_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3_1() { return cFullStopKeyword_3_1; }
		
		//(destination_volume=[Volume])?
		public Assignment getDestination_volumeAssignment_3_2() { return cDestination_volumeAssignment_3_2; }
		
		//[Volume]
		public CrossReference getDestination_volumeVolumeCrossReference_3_2_0() { return cDestination_volumeVolumeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getDestination_volumeVolumeIDTerminalRuleCall_3_2_0_1() { return cDestination_volumeVolumeIDTerminalRuleCall_3_2_0_1; }
		
		//('{' ('policy' ':' policy=[SnapshotPolicy] ',')? ('max_transfer_rate' ':' max_transfer_rate=EInt)? '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//('policy' ':' policy=[SnapshotPolicy] ',')?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'policy'
		public Keyword getPolicyKeyword_4_1_0() { return cPolicyKeyword_4_1_0; }
		
		//':'
		public Keyword getColonKeyword_4_1_1() { return cColonKeyword_4_1_1; }
		
		//policy=[SnapshotPolicy]
		public Assignment getPolicyAssignment_4_1_2() { return cPolicyAssignment_4_1_2; }
		
		//[SnapshotPolicy]
		public CrossReference getPolicySnapshotPolicyCrossReference_4_1_2_0() { return cPolicySnapshotPolicyCrossReference_4_1_2_0; }
		
		//ID
		public RuleCall getPolicySnapshotPolicyIDTerminalRuleCall_4_1_2_0_1() { return cPolicySnapshotPolicyIDTerminalRuleCall_4_1_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_3() { return cCommaKeyword_4_1_3; }
		
		//('max_transfer_rate' ':' max_transfer_rate=EInt)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'max_transfer_rate'
		public Keyword getMax_transfer_rateKeyword_4_2_0() { return cMax_transfer_rateKeyword_4_2_0; }
		
		//':'
		public Keyword getColonKeyword_4_2_1() { return cColonKeyword_4_2_1; }
		
		//max_transfer_rate=EInt
		public Assignment getMax_transfer_rateAssignment_4_2_2() { return cMax_transfer_rateAssignment_4_2_2; }
		
		//EInt
		public RuleCall getMax_transfer_rateEIntParserRuleCall_4_2_2_0() { return cMax_transfer_rateEIntParserRuleCall_4_2_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.netapp.pcs.grammarSnapMirror.ReplicationMappings.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final ReplicationPolicyElements pReplicationPolicy;
	private final ReplicationMappingsElements pReplicationMappings;
	private final EIntElements pEInt;
	private final TerminalRule tNEWLINE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReplicationMappingsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pReplicationPolicy = new ReplicationPolicyElements();
		this.pReplicationMappings = new ReplicationMappingsElements();
		this.pEInt = new EIntElements();
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.netapp.pcs.grammarSnapMirror.ReplicationMappings.NEWLINE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.netapp.pcs.grammarSnapMirror.ReplicationMappings".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ReplicationPolicy returns ReplicationPolicy:
	//    {ReplicationPolicy}
	//    replication_mappings+=ReplicationMappings (NEWLINE replication_mappings+=ReplicationMappings)*;
	public ReplicationPolicyElements getReplicationPolicyAccess() {
		return pReplicationPolicy;
	}
	
	public ParserRule getReplicationPolicyRule() {
		return getReplicationPolicyAccess().getRule();
	}
	
	//ReplicationMappings returns SnapMirror:
	//    {SnapMirror}
	//    (source_cvo=[CVO]  '.' (source_volume=[Volume])?)? ('->' | bidirectional?='<->') (destination_cvo=[CVO]  '.' (destination_volume=[Volume])?)?
	//    ('{' ('policy' ':' policy=[SnapshotPolicy] ',')? ('max_transfer_rate' ':' max_transfer_rate=EInt)? '}')?;
	public ReplicationMappingsElements getReplicationMappingsAccess() {
		return pReplicationMappings;
	}
	
	public ParserRule getReplicationMappingsRule() {
		return getReplicationMappingsAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal NEWLINE:
	//    (' '|'\t')* '\r'? '\n' (' '|'\t')*;
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

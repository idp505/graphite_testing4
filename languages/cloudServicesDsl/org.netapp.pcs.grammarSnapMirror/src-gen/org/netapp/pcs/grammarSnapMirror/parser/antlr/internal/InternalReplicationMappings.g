/*
 * generated by Xtext 2.36.0
 */
grammar InternalReplicationMappings;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.netapp.pcs.grammarSnapMirror.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.netapp.pcs.grammarSnapMirror.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.netapp.pcs.grammarSnapMirror.services.ReplicationMappingsGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private ReplicationMappingsGrammarAccess grammarAccess;

    public InternalReplicationMappingsParser(TokenStream input, ReplicationMappingsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ReplicationPolicy";
   	}

   	@Override
   	protected ReplicationMappingsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleReplicationPolicy
entryRuleReplicationPolicy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReplicationPolicyRule()); }
	iv_ruleReplicationPolicy=ruleReplicationPolicy
	{ $current=$iv_ruleReplicationPolicy.current; }
	EOF;

// Rule ReplicationPolicy
ruleReplicationPolicy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getReplicationPolicyAccess().getReplicationPolicyAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getReplicationPolicyAccess().getReplication_mappingsReplicationMappingsParserRuleCall_1_0());
				}
				lv_replication_mappings_1_0=ruleReplicationMappings
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReplicationPolicyRule());
					}
					add(
						$current,
						"replication_mappings",
						lv_replication_mappings_1_0,
						"org.netapp.pcs.grammarSnapMirror.ReplicationMappings.ReplicationMappings");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_NEWLINE_2=RULE_NEWLINE
			{
				newLeafNode(this_NEWLINE_2, grammarAccess.getReplicationPolicyAccess().getNEWLINETerminalRuleCall_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReplicationPolicyAccess().getReplication_mappingsReplicationMappingsParserRuleCall_2_1_0());
					}
					lv_replication_mappings_3_0=ruleReplicationMappings
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReplicationPolicyRule());
						}
						add(
							$current,
							"replication_mappings",
							lv_replication_mappings_3_0,
							"org.netapp.pcs.grammarSnapMirror.ReplicationMappings.ReplicationMappings");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleReplicationMappings
entryRuleReplicationMappings returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReplicationMappingsRule()); }
	iv_ruleReplicationMappings=ruleReplicationMappings
	{ $current=$iv_ruleReplicationMappings.current; }
	EOF;

// Rule ReplicationMappings
ruleReplicationMappings returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getReplicationMappingsAccess().getSnapMirrorAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReplicationMappingsRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getReplicationMappingsAccess().getSource_cvoCVOCrossReference_1_0_0());
					}
				)
			)
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getReplicationMappingsAccess().getFullStopKeyword_1_1());
			}
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReplicationMappingsRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getReplicationMappingsAccess().getSource_volumeVolumeCrossReference_1_2_0());
					}
				)
			)?
		)?
		(
			otherlv_4='->'
			{
				newLeafNode(otherlv_4, grammarAccess.getReplicationMappingsAccess().getHyphenMinusGreaterThanSignKeyword_2_0());
			}
			    |
			(
				(
					lv_bidirectional_5_0='<->'
					{
						newLeafNode(lv_bidirectional_5_0, grammarAccess.getReplicationMappingsAccess().getBidirectionalLessThanSignHyphenMinusGreaterThanSignKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReplicationMappingsRule());
						}
						setWithLastConsumed($current, "bidirectional", lv_bidirectional_5_0 != null, "<->");
					}
				)
			)
		)
		(
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReplicationMappingsRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getReplicationMappingsAccess().getDestination_cvoCVOCrossReference_3_0_0());
					}
				)
			)
			otherlv_7='.'
			{
				newLeafNode(otherlv_7, grammarAccess.getReplicationMappingsAccess().getFullStopKeyword_3_1());
			}
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReplicationMappingsRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getReplicationMappingsAccess().getDestination_volumeVolumeCrossReference_3_2_0());
					}
				)
			)?
		)?
		(
			otherlv_9='{'
			{
				newLeafNode(otherlv_9, grammarAccess.getReplicationMappingsAccess().getLeftCurlyBracketKeyword_4_0());
			}
			(
				otherlv_10='policy'
				{
					newLeafNode(otherlv_10, grammarAccess.getReplicationMappingsAccess().getPolicyKeyword_4_1_0());
				}
				otherlv_11=':'
				{
					newLeafNode(otherlv_11, grammarAccess.getReplicationMappingsAccess().getColonKeyword_4_1_1());
				}
				(
					(
						{
							/* */
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getReplicationMappingsRule());
							}
						}
						otherlv_12=RULE_ID
						{
							newLeafNode(otherlv_12, grammarAccess.getReplicationMappingsAccess().getPolicySnapshotPolicyCrossReference_4_1_2_0());
						}
					)
				)
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getReplicationMappingsAccess().getCommaKeyword_4_1_3());
				}
			)?
			(
				otherlv_14='max_transfer_rate'
				{
					newLeafNode(otherlv_14, grammarAccess.getReplicationMappingsAccess().getMax_transfer_rateKeyword_4_2_0());
				}
				otherlv_15=':'
				{
					newLeafNode(otherlv_15, grammarAccess.getReplicationMappingsAccess().getColonKeyword_4_2_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getReplicationMappingsAccess().getMax_transfer_rateEIntParserRuleCall_4_2_2_0());
						}
						lv_max_transfer_rate_16_0=ruleEInt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getReplicationMappingsRule());
							}
							set(
								$current,
								"max_transfer_rate",
								lv_max_transfer_rate_16_0,
								"org.netapp.pcs.grammarSnapMirror.ReplicationMappings.EInt");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			otherlv_17='}'
			{
				newLeafNode(otherlv_17, grammarAccess.getReplicationMappingsAccess().getRightCurlyBracketKeyword_4_3());
			}
		)?
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_NEWLINE : (' '|'\t')* '\r'? '\n' (' '|'\t')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

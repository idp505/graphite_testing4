/**
 */
package TestingPackage.provider;

import TestingPackage.util.TestingMMAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TestingMMItemProviderAdapterFactory extends TestingMMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TestingMMItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.TestingSpace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestingSpaceItemProvider testingSpaceItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.TestingSpace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestingSpaceAdapter() {
		if (testingSpaceItemProvider == null) {
			testingSpaceItemProvider = new TestingSpaceItemProvider(this);
		}

		return testingSpaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.TestCampaign} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestCampaignItemProvider testCampaignItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.TestCampaign}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestCampaignAdapter() {
		if (testCampaignItemProvider == null) {
			testCampaignItemProvider = new TestCampaignItemProvider(this);
		}

		return testCampaignItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.Test} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestItemProvider testItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.Test}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestAdapter() {
		if (testItemProvider == null) {
			testItemProvider = new TestItemProvider(this);
		}

		return testItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.PassiveMonitorOnly} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PassiveMonitorOnlyItemProvider passiveMonitorOnlyItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.PassiveMonitorOnly}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPassiveMonitorOnlyAdapter() {
		if (passiveMonitorOnlyItemProvider == null) {
			passiveMonitorOnlyItemProvider = new PassiveMonitorOnlyItemProvider(this);
		}

		return passiveMonitorOnlyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.TimeBasedActivationGenerationMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeBasedActivationGenerationMethodItemProvider timeBasedActivationGenerationMethodItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.TimeBasedActivationGenerationMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeBasedActivationGenerationMethodAdapter() {
		if (timeBasedActivationGenerationMethodItemProvider == null) {
			timeBasedActivationGenerationMethodItemProvider = new TimeBasedActivationGenerationMethodItemProvider(this);
		}

		return timeBasedActivationGenerationMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.ConditionBasedActivationGenerationMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionBasedActivationGenerationMethodItemProvider conditionBasedActivationGenerationMethodItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.ConditionBasedActivationGenerationMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionBasedActivationGenerationMethodAdapter() {
		if (conditionBasedActivationGenerationMethodItemProvider == null) {
			conditionBasedActivationGenerationMethodItemProvider = new ConditionBasedActivationGenerationMethodItemProvider(this);
		}

		return conditionBasedActivationGenerationMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.CampaignResultSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CampaignResultSetItemProvider campaignResultSetItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.CampaignResultSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCampaignResultSetAdapter() {
		if (campaignResultSetItemProvider == null) {
			campaignResultSetItemProvider = new CampaignResultSetItemProvider(this);
		}

		return campaignResultSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.TimeBasedEnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeBasedEndItemProvider timeBasedEndItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.TimeBasedEnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeBasedEndAdapter() {
		if (timeBasedEndItemProvider == null) {
			timeBasedEndItemProvider = new TimeBasedEndItemProvider(this);
		}

		return timeBasedEndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.RandomTestGeneration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RandomTestGenerationItemProvider randomTestGenerationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.RandomTestGeneration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRandomTestGenerationAdapter() {
		if (randomTestGenerationItemProvider == null) {
			randomTestGenerationItemProvider = new RandomTestGenerationItemProvider(this);
		}

		return randomTestGenerationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.NSGAEvolutionaryAlgorithm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NSGAEvolutionaryAlgorithmItemProvider nsgaEvolutionaryAlgorithmItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.NSGAEvolutionaryAlgorithm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNSGAEvolutionaryAlgorithmAdapter() {
		if (nsgaEvolutionaryAlgorithmItemProvider == null) {
			nsgaEvolutionaryAlgorithmItemProvider = new NSGAEvolutionaryAlgorithmItemProvider(this);
		}

		return nsgaEvolutionaryAlgorithmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.NSGAWithCoverageCells} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NSGAWithCoverageCellsItemProvider nsgaWithCoverageCellsItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.NSGAWithCoverageCells}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNSGAWithCoverageCellsAdapter() {
		if (nsgaWithCoverageCellsItemProvider == null) {
			nsgaWithCoverageCellsItemProvider = new NSGAWithCoverageCellsItemProvider(this);
		}

		return nsgaWithCoverageCellsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.DimensionInterval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DimensionIntervalItemProvider dimensionIntervalItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.DimensionInterval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDimensionIntervalAdapter() {
		if (dimensionIntervalItemProvider == null) {
			dimensionIntervalItemProvider = new DimensionIntervalItemProvider(this);
		}

		return dimensionIntervalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.RepeatedExecution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepeatedExecutionItemProvider repeatedExecutionItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.RepeatedExecution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepeatedExecutionAdapter() {
		if (repeatedExecutionItemProvider == null) {
			repeatedExecutionItemProvider = new RepeatedExecutionItemProvider(this);
		}

		return repeatedExecutionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (testingSpaceItemProvider != null) testingSpaceItemProvider.dispose();
		if (testCampaignItemProvider != null) testCampaignItemProvider.dispose();
		if (testItemProvider != null) testItemProvider.dispose();
		if (passiveMonitorOnlyItemProvider != null) passiveMonitorOnlyItemProvider.dispose();
		if (timeBasedActivationGenerationMethodItemProvider != null) timeBasedActivationGenerationMethodItemProvider.dispose();
		if (conditionBasedActivationGenerationMethodItemProvider != null) conditionBasedActivationGenerationMethodItemProvider.dispose();
		if (campaignResultSetItemProvider != null) campaignResultSetItemProvider.dispose();
		if (timeBasedEndItemProvider != null) timeBasedEndItemProvider.dispose();
		if (randomTestGenerationItemProvider != null) randomTestGenerationItemProvider.dispose();
		if (nsgaEvolutionaryAlgorithmItemProvider != null) nsgaEvolutionaryAlgorithmItemProvider.dispose();
		if (nsgaWithCoverageCellsItemProvider != null) nsgaWithCoverageCellsItemProvider.dispose();
		if (dimensionIntervalItemProvider != null) dimensionIntervalItemProvider.dispose();
		if (repeatedExecutionItemProvider != null) repeatedExecutionItemProvider.dispose();
	}

}

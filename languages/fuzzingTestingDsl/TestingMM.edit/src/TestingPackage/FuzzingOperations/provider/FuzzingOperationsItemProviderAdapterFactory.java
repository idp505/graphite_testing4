/**
 */
package TestingPackage.FuzzingOperations.provider;

import TestingPackage.FuzzingOperations.util.FuzzingOperationsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FuzzingOperationsItemProviderAdapterFactory extends FuzzingOperationsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FuzzingOperationsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.OfflineFuzzingOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OfflineFuzzingOperationItemProvider offlineFuzzingOperationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.OfflineFuzzingOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOfflineFuzzingOperationAdapter() {
		if (offlineFuzzingOperationItemProvider == null) {
			offlineFuzzingOperationItemProvider = new OfflineFuzzingOperationItemProvider(this);
		}

		return offlineFuzzingOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.CustomFuzzingOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomFuzzingOperationItemProvider customFuzzingOperationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.CustomFuzzingOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomFuzzingOperationAdapter() {
		if (customFuzzingOperationItemProvider == null) {
			customFuzzingOperationItemProvider = new CustomFuzzingOperationItemProvider(this);
		}

		return customFuzzingOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.CustomOfflineFuzzingOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomOfflineFuzzingOperationItemProvider customOfflineFuzzingOperationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.CustomOfflineFuzzingOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomOfflineFuzzingOperationAdapter() {
		if (customOfflineFuzzingOperationItemProvider == null) {
			customOfflineFuzzingOperationItemProvider = new CustomOfflineFuzzingOperationItemProvider(this);
		}

		return customOfflineFuzzingOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.FixedTimeActivation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FixedTimeActivationItemProvider fixedTimeActivationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.FixedTimeActivation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFixedTimeActivationAdapter() {
		if (fixedTimeActivationItemProvider == null) {
			fixedTimeActivationItemProvider = new FixedTimeActivationItemProvider(this);
		}

		return fixedTimeActivationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.ConditionBasedActivation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionBasedActivationItemProvider conditionBasedActivationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.ConditionBasedActivation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionBasedActivationAdapter() {
		if (conditionBasedActivationItemProvider == null) {
			conditionBasedActivationItemProvider = new ConditionBasedActivationItemProvider(this);
		}

		return conditionBasedActivationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.ConditionBasedTimeLimited} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionBasedTimeLimitedItemProvider conditionBasedTimeLimitedItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.ConditionBasedTimeLimited}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionBasedTimeLimitedAdapter() {
		if (conditionBasedTimeLimitedItemProvider == null) {
			conditionBasedTimeLimitedItemProvider = new ConditionBasedTimeLimitedItemProvider(this);
		}

		return conditionBasedTimeLimitedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.FuzzTestingOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FuzzTestingOperationItemProvider fuzzTestingOperationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.FuzzTestingOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFuzzTestingOperationAdapter() {
		if (fuzzTestingOperationItemProvider == null) {
			fuzzTestingOperationItemProvider = new FuzzTestingOperationItemProvider(this);
		}

		return fuzzTestingOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.ComponentOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentOperationItemProvider componentOperationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.ComponentOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentOperationAdapter() {
		if (componentOperationItemProvider == null) {
			componentOperationItemProvider = new ComponentOperationItemProvider(this);
		}

		return componentOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.ComponentPropertyOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentPropertyOperationItemProvider componentPropertyOperationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.ComponentPropertyOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentPropertyOperationAdapter() {
		if (componentPropertyOperationItemProvider == null) {
			componentPropertyOperationItemProvider = new ComponentPropertyOperationItemProvider(this);
		}

		return componentPropertyOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.ComponentSubPropertyOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentSubPropertyOperationItemProvider componentSubPropertyOperationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.ComponentSubPropertyOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentSubPropertyOperationAdapter() {
		if (componentSubPropertyOperationItemProvider == null) {
			componentSubPropertyOperationItemProvider = new ComponentSubPropertyOperationItemProvider(this);
		}

		return componentSubPropertyOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.VariableOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableOperationItemProvider variableOperationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.VariableOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableOperationAdapter() {
		if (variableOperationItemProvider == null) {
			variableOperationItemProvider = new VariableOperationItemProvider(this);
		}

		return variableOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.RandomValueFuzzingOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RandomValueFuzzingOperationItemProvider randomValueFuzzingOperationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.RandomValueFuzzingOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRandomValueFuzzingOperationAdapter() {
		if (randomValueFuzzingOperationItemProvider == null) {
			randomValueFuzzingOperationItemProvider = new RandomValueFuzzingOperationItemProvider(this);
		}

		return randomValueFuzzingOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.RandomValueFromSetOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RandomValueFromSetOperationItemProvider randomValueFromSetOperationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.RandomValueFromSetOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRandomValueFromSetOperationAdapter() {
		if (randomValueFromSetOperationItemProvider == null) {
			randomValueFromSetOperationItemProvider = new RandomValueFromSetOperationItemProvider(this);
		}

		return randomValueFromSetOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.ValueSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueSetItemProvider valueSetItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.ValueSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueSetAdapter() {
		if (valueSetItemProvider == null) {
			valueSetItemProvider = new ValueSetItemProvider(this);
		}

		return valueSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.IntRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntRangeItemProvider intRangeItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.IntRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntRangeAdapter() {
		if (intRangeItemProvider == null) {
			intRangeItemProvider = new IntRangeItemProvider(this);
		}

		return intRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.DoubleRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoubleRangeItemProvider doubleRangeItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.DoubleRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoubleRangeAdapter() {
		if (doubleRangeItemProvider == null) {
			doubleRangeItemProvider = new DoubleRangeItemProvider(this);
		}

		return doubleRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.Point} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PointItemProvider pointItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.Point}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPointAdapter() {
		if (pointItemProvider == null) {
			pointItemProvider = new PointItemProvider(this);
		}

		return pointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.PointRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PointRangeItemProvider pointRangeItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.PointRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPointRangeAdapter() {
		if (pointRangeItemProvider == null) {
			pointRangeItemProvider = new PointRangeItemProvider(this);
		}

		return pointRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.StringSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringSetItemProvider stringSetItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.StringSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringSetAdapter() {
		if (stringSetItemProvider == null) {
			stringSetItemProvider = new StringSetItemProvider(this);
		}

		return stringSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.ExternalResourceSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalResourceSetItemProvider externalResourceSetItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.ExternalResourceSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalResourceSetAdapter() {
		if (externalResourceSetItemProvider == null) {
			externalResourceSetItemProvider = new ExternalResourceSetItemProvider(this);
		}

		return externalResourceSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.NetworkFuzzingOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkFuzzingOperationItemProvider networkFuzzingOperationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.NetworkFuzzingOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkFuzzingOperationAdapter() {
		if (networkFuzzingOperationItemProvider == null) {
			networkFuzzingOperationItemProvider = new NetworkFuzzingOperationItemProvider(this);
		}

		return networkFuzzingOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.BlackholeNetworkOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlackholeNetworkOperationItemProvider blackholeNetworkOperationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.BlackholeNetworkOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlackholeNetworkOperationAdapter() {
		if (blackholeNetworkOperationItemProvider == null) {
			blackholeNetworkOperationItemProvider = new BlackholeNetworkOperationItemProvider(this);
		}

		return blackholeNetworkOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.LatencyNetworkOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LatencyNetworkOperationItemProvider latencyNetworkOperationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.LatencyNetworkOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLatencyNetworkOperationAdapter() {
		if (latencyNetworkOperationItemProvider == null) {
			latencyNetworkOperationItemProvider = new LatencyNetworkOperationItemProvider(this);
		}

		return latencyNetworkOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.FuzzingOperations.PacketLossNetworkOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PacketLossNetworkOperationItemProvider packetLossNetworkOperationItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.FuzzingOperations.PacketLossNetworkOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPacketLossNetworkOperationAdapter() {
		if (packetLossNetworkOperationItemProvider == null) {
			packetLossNetworkOperationItemProvider = new PacketLossNetworkOperationItemProvider(this);
		}

		return packetLossNetworkOperationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (offlineFuzzingOperationItemProvider != null) offlineFuzzingOperationItemProvider.dispose();
		if (customFuzzingOperationItemProvider != null) customFuzzingOperationItemProvider.dispose();
		if (customOfflineFuzzingOperationItemProvider != null) customOfflineFuzzingOperationItemProvider.dispose();
		if (fixedTimeActivationItemProvider != null) fixedTimeActivationItemProvider.dispose();
		if (conditionBasedActivationItemProvider != null) conditionBasedActivationItemProvider.dispose();
		if (conditionBasedTimeLimitedItemProvider != null) conditionBasedTimeLimitedItemProvider.dispose();
		if (fuzzTestingOperationItemProvider != null) fuzzTestingOperationItemProvider.dispose();
		if (componentOperationItemProvider != null) componentOperationItemProvider.dispose();
		if (componentPropertyOperationItemProvider != null) componentPropertyOperationItemProvider.dispose();
		if (componentSubPropertyOperationItemProvider != null) componentSubPropertyOperationItemProvider.dispose();
		if (variableOperationItemProvider != null) variableOperationItemProvider.dispose();
		if (randomValueFuzzingOperationItemProvider != null) randomValueFuzzingOperationItemProvider.dispose();
		if (randomValueFromSetOperationItemProvider != null) randomValueFromSetOperationItemProvider.dispose();
		if (valueSetItemProvider != null) valueSetItemProvider.dispose();
		if (intRangeItemProvider != null) intRangeItemProvider.dispose();
		if (doubleRangeItemProvider != null) doubleRangeItemProvider.dispose();
		if (pointItemProvider != null) pointItemProvider.dispose();
		if (pointRangeItemProvider != null) pointRangeItemProvider.dispose();
		if (stringSetItemProvider != null) stringSetItemProvider.dispose();
		if (externalResourceSetItemProvider != null) externalResourceSetItemProvider.dispose();
		if (networkFuzzingOperationItemProvider != null) networkFuzzingOperationItemProvider.dispose();
		if (blackholeNetworkOperationItemProvider != null) blackholeNetworkOperationItemProvider.dispose();
		if (latencyNetworkOperationItemProvider != null) latencyNetworkOperationItemProvider.dispose();
		if (packetLossNetworkOperationItemProvider != null) packetLossNetworkOperationItemProvider.dispose();
	}

}

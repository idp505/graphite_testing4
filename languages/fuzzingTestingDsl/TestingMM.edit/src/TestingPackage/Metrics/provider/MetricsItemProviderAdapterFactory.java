/**
 */
package TestingPackage.Metrics.provider;

import TestingPackage.Metrics.util.MetricsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MetricsItemProviderAdapterFactory extends MetricsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MetricsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.Metrics.InputStream} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputStreamItemProvider inputStreamItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.Metrics.InputStream}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputStreamAdapter() {
		if (inputStreamItemProvider == null) {
			inputStreamItemProvider = new InputStreamItemProvider(this);
		}

		return inputStreamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.Metrics.OutputStream} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputStreamItemProvider outputStreamItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.Metrics.OutputStream}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputStreamAdapter() {
		if (outputStreamItemProvider == null) {
			outputStreamItemProvider = new OutputStreamItemProvider(this);
		}

		return outputStreamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.Metrics.MetricDefault} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetricDefaultItemProvider metricDefaultItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.Metrics.MetricDefault}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetricDefaultAdapter() {
		if (metricDefaultItemProvider == null) {
			metricDefaultItemProvider = new MetricDefaultItemProvider(this);
		}

		return metricDefaultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.Metrics.VariableMetric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableMetricItemProvider variableMetricItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.Metrics.VariableMetric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableMetricAdapter() {
		if (variableMetricItemProvider == null) {
			variableMetricItemProvider = new VariableMetricItemProvider(this);
		}

		return variableMetricItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.Metrics.MetricInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetricInstanceItemProvider metricInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.Metrics.MetricInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetricInstanceAdapter() {
		if (metricInstanceItemProvider == null) {
			metricInstanceItemProvider = new MetricInstanceItemProvider(this);
		}

		return metricInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.Metrics.StreamMetric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StreamMetricItemProvider streamMetricItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.Metrics.StreamMetric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStreamMetricAdapter() {
		if (streamMetricItemProvider == null) {
			streamMetricItemProvider = new StreamMetricItemProvider(this);
		}

		return streamMetricItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.Metrics.StartEndTimingMetric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartEndTimingMetricItemProvider startEndTimingMetricItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.Metrics.StartEndTimingMetric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartEndTimingMetricAdapter() {
		if (startEndTimingMetricItemProvider == null) {
			startEndTimingMetricItemProvider = new StartEndTimingMetricItemProvider(this);
		}

		return startEndTimingMetricItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.Metrics.FuzzingOperationTimesMetric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FuzzingOperationTimesMetricItemProvider fuzzingOperationTimesMetricItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.Metrics.FuzzingOperationTimesMetric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFuzzingOperationTimesMetricAdapter() {
		if (fuzzingOperationTimesMetricItemProvider == null) {
			fuzzingOperationTimesMetricItemProvider = new FuzzingOperationTimesMetricItemProvider(this);
		}

		return fuzzingOperationTimesMetricItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TestingPackage.Metrics.FileStreamResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileStreamResultItemProvider fileStreamResultItemProvider;

	/**
	 * This creates an adapter for a {@link TestingPackage.Metrics.FileStreamResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileStreamResultAdapter() {
		if (fileStreamResultItemProvider == null) {
			fileStreamResultItemProvider = new FileStreamResultItemProvider(this);
		}

		return fileStreamResultItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (inputStreamItemProvider != null) inputStreamItemProvider.dispose();
		if (outputStreamItemProvider != null) outputStreamItemProvider.dispose();
		if (metricDefaultItemProvider != null) metricDefaultItemProvider.dispose();
		if (variableMetricItemProvider != null) variableMetricItemProvider.dispose();
		if (metricInstanceItemProvider != null) metricInstanceItemProvider.dispose();
		if (streamMetricItemProvider != null) streamMetricItemProvider.dispose();
		if (startEndTimingMetricItemProvider != null) startEndTimingMetricItemProvider.dispose();
		if (fuzzingOperationTimesMetricItemProvider != null) fuzzingOperationTimesMetricItemProvider.dispose();
		if (fileStreamResultItemProvider != null) fileStreamResultItemProvider.dispose();
	}

}

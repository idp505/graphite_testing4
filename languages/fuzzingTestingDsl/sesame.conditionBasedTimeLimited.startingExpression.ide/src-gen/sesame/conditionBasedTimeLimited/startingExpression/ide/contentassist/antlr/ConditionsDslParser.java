/*
 * generated by Xtext 2.36.0
 */
package sesame.conditionBasedTimeLimited.startingExpression.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import sesame.conditionBasedTimeLimited.startingExpression.ide.contentassist.antlr.internal.InternalConditionsDslParser;
import sesame.conditionBasedTimeLimited.startingExpression.services.ConditionsDslGrammarAccess;

public class ConditionsDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ConditionsDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ConditionsDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getConditionElementAccess().getAlternatives(), "rule__ConditionElement__Alternatives");
			builder.put(grammarAccess.getConditionExprAccess().getAlternatives(), "rule__ConditionExpr__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getEDoubleAccess().getAlternatives_4_0(), "rule__EDouble__Alternatives_4_0");
			builder.put(grammarAccess.getBinaryComparisonOperationAccess().getAlternatives(), "rule__BinaryComparisonOperation__Alternatives");
			builder.put(grammarAccess.getBinaryLogicalOperationAccess().getAlternatives(), "rule__BinaryLogicalOperation__Alternatives");
			builder.put(grammarAccess.getConditionBasedTimeLimitedAccess().getGroup(), "rule__ConditionBasedTimeLimited__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getBasicConditionAccess().getGroup(), "rule__BasicCondition__Group__0");
			builder.put(grammarAccess.getCompositeConditionAccess().getGroup(), "rule__CompositeCondition__Group__0");
			builder.put(grammarAccess.getConditionVariableAccess().getGroup(), "rule__ConditionVariable__Group__0");
			builder.put(grammarAccess.getConditionIntegerAccess().getGroup(), "rule__ConditionInteger__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup_4(), "rule__EDouble__Group_4__0");
			builder.put(grammarAccess.getConditionBasedTimeLimitedAccess().getStartingAssignment_1(), "rule__ConditionBasedTimeLimited__StartingAssignment_1");
			builder.put(grammarAccess.getConditionAccess().getCAssignment_2(), "rule__Condition__CAssignment_2");
			builder.put(grammarAccess.getBasicConditionAccess().getLeftAssignment_2(), "rule__BasicCondition__LeftAssignment_2");
			builder.put(grammarAccess.getBasicConditionAccess().getBincompAssignment_3(), "rule__BasicCondition__BincompAssignment_3");
			builder.put(grammarAccess.getBasicConditionAccess().getRightAssignment_4(), "rule__BasicCondition__RightAssignment_4");
			builder.put(grammarAccess.getCompositeConditionAccess().getLeftAssignment_2(), "rule__CompositeCondition__LeftAssignment_2");
			builder.put(grammarAccess.getCompositeConditionAccess().getBinopAssignment_3(), "rule__CompositeCondition__BinopAssignment_3");
			builder.put(grammarAccess.getCompositeConditionAccess().getRightAssignment_4(), "rule__CompositeCondition__RightAssignment_4");
			builder.put(grammarAccess.getConditionVariableAccess().getMetricAssignment_2(), "rule__ConditionVariable__MetricAssignment_2");
			builder.put(grammarAccess.getConditionIntegerAccess().getValueAssignment_1(), "rule__ConditionInteger__ValueAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ConditionsDslGrammarAccess grammarAccess;

	@Override
	protected InternalConditionsDslParser createParser() {
		InternalConditionsDslParser result = new InternalConditionsDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ConditionsDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ConditionsDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}

/*
 * generated by Xtext 2.36.0
 */
grammar InternalConditionsDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package sesame.conditionBasedActivation.startingEndingExpression.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package sesame.conditionBasedActivation.startingEndingExpression.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import sesame.conditionBasedActivation.startingEndingExpression.services.ConditionsDslGrammarAccess;

}
@parser::members {
	private ConditionsDslGrammarAccess grammarAccess;

	public void setGrammarAccess(ConditionsDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMainRules
entryRuleMainRules
:
{ before(grammarAccess.getMainRulesRule()); }
	 ruleMainRules
{ after(grammarAccess.getMainRulesRule()); } 
	 EOF 
;

// Rule MainRules
ruleMainRules 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMainRulesAccess().getAlternatives()); }
		(rule__MainRules__Alternatives)
		{ after(grammarAccess.getMainRulesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionBasedActivationStarting
entryRuleConditionBasedActivationStarting
:
{ before(grammarAccess.getConditionBasedActivationStartingRule()); }
	 ruleConditionBasedActivationStarting
{ after(grammarAccess.getConditionBasedActivationStartingRule()); } 
	 EOF 
;

// Rule ConditionBasedActivationStarting
ruleConditionBasedActivationStarting 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionBasedActivationStartingAccess().getGroup()); }
		(rule__ConditionBasedActivationStarting__Group__0)
		{ after(grammarAccess.getConditionBasedActivationStartingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionBasedActivationEnding
entryRuleConditionBasedActivationEnding
:
{ before(grammarAccess.getConditionBasedActivationEndingRule()); }
	 ruleConditionBasedActivationEnding
{ after(grammarAccess.getConditionBasedActivationEndingRule()); } 
	 EOF 
;

// Rule ConditionBasedActivationEnding
ruleConditionBasedActivationEnding 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionBasedActivationEndingAccess().getGroup()); }
		(rule__ConditionBasedActivationEnding__Group__0)
		{ after(grammarAccess.getConditionBasedActivationEndingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getGroup()); }
		(rule__Condition__Group__0)
		{ after(grammarAccess.getConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionElement
entryRuleConditionElement
:
{ before(grammarAccess.getConditionElementRule()); }
	 ruleConditionElement
{ after(grammarAccess.getConditionElementRule()); } 
	 EOF 
;

// Rule ConditionElement
ruleConditionElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionElementAccess().getAlternatives()); }
		(rule__ConditionElement__Alternatives)
		{ after(grammarAccess.getConditionElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBasicCondition
entryRuleBasicCondition
:
{ before(grammarAccess.getBasicConditionRule()); }
	 ruleBasicCondition
{ after(grammarAccess.getBasicConditionRule()); } 
	 EOF 
;

// Rule BasicCondition
ruleBasicCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBasicConditionAccess().getGroup()); }
		(rule__BasicCondition__Group__0)
		{ after(grammarAccess.getBasicConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompositeCondition
entryRuleCompositeCondition
:
{ before(grammarAccess.getCompositeConditionRule()); }
	 ruleCompositeCondition
{ after(grammarAccess.getCompositeConditionRule()); } 
	 EOF 
;

// Rule CompositeCondition
ruleCompositeCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompositeConditionAccess().getGroup()); }
		(rule__CompositeCondition__Group__0)
		{ after(grammarAccess.getCompositeConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionExpr
entryRuleConditionExpr
:
{ before(grammarAccess.getConditionExprRule()); }
	 ruleConditionExpr
{ after(grammarAccess.getConditionExprRule()); } 
	 EOF 
;

// Rule ConditionExpr
ruleConditionExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionExprAccess().getAlternatives()); }
		(rule__ConditionExpr__Alternatives)
		{ after(grammarAccess.getConditionExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionVariable
entryRuleConditionVariable
:
{ before(grammarAccess.getConditionVariableRule()); }
	 ruleConditionVariable
{ after(grammarAccess.getConditionVariableRule()); } 
	 EOF 
;

// Rule ConditionVariable
ruleConditionVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionVariableAccess().getGroup()); }
		(rule__ConditionVariable__Group__0)
		{ after(grammarAccess.getConditionVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionInteger
entryRuleConditionInteger
:
{ before(grammarAccess.getConditionIntegerRule()); }
	 ruleConditionInteger
{ after(grammarAccess.getConditionIntegerRule()); } 
	 EOF 
;

// Rule ConditionInteger
ruleConditionInteger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionIntegerAccess().getGroup()); }
		(rule__ConditionInteger__Group__0)
		{ after(grammarAccess.getConditionIntegerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BinaryComparisonOperation
ruleBinaryComparisonOperation
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryComparisonOperationAccess().getAlternatives()); }
		(rule__BinaryComparisonOperation__Alternatives)
		{ after(grammarAccess.getBinaryComparisonOperationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BinaryLogicalOperation
ruleBinaryLogicalOperation
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryLogicalOperationAccess().getAlternatives()); }
		(rule__BinaryLogicalOperation__Alternatives)
		{ after(grammarAccess.getBinaryLogicalOperationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainRules__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainRulesAccess().getConditionBasedActivationStartingParserRuleCall_0()); }
		ruleConditionBasedActivationStarting
		{ after(grammarAccess.getMainRulesAccess().getConditionBasedActivationStartingParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMainRulesAccess().getConditionBasedActivationEndingParserRuleCall_1()); }
		ruleConditionBasedActivationEnding
		{ after(grammarAccess.getMainRulesAccess().getConditionBasedActivationEndingParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionElementAccess().getCompositeConditionParserRuleCall_0()); }
		ruleCompositeCondition
		{ after(grammarAccess.getConditionElementAccess().getCompositeConditionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionElementAccess().getBasicConditionParserRuleCall_1()); }
		ruleBasicCondition
		{ after(grammarAccess.getConditionElementAccess().getBasicConditionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionExpr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionExprAccess().getConditionIntegerParserRuleCall_0()); }
		ruleConditionInteger
		{ after(grammarAccess.getConditionExprAccess().getConditionIntegerParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionExprAccess().getConditionVariableParserRuleCall_1()); }
		ruleConditionVariable
		{ after(grammarAccess.getConditionExprAccess().getConditionVariableParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryComparisonOperation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryComparisonOperationAccess().getLESS_THANEnumLiteralDeclaration_0()); }
		('<')
		{ after(grammarAccess.getBinaryComparisonOperationAccess().getLESS_THANEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryComparisonOperationAccess().getGREATER_THANEnumLiteralDeclaration_1()); }
		('>')
		{ after(grammarAccess.getBinaryComparisonOperationAccess().getGREATER_THANEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryComparisonOperationAccess().getEQUALSEnumLiteralDeclaration_2()); }
		('=')
		{ after(grammarAccess.getBinaryComparisonOperationAccess().getEQUALSEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicalOperation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryLogicalOperationAccess().getANDEnumLiteralDeclaration_0()); }
		('AND')
		{ after(grammarAccess.getBinaryLogicalOperationAccess().getANDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryLogicalOperationAccess().getOREnumLiteralDeclaration_1()); }
		('OR')
		{ after(grammarAccess.getBinaryLogicalOperationAccess().getOREnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionBasedActivationStarting__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionBasedActivationStarting__Group__0__Impl
	rule__ConditionBasedActivationStarting__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionBasedActivationStarting__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionBasedActivationStartingAccess().getConditionBasedActivationAction_0()); }
	()
	{ after(grammarAccess.getConditionBasedActivationStartingAccess().getConditionBasedActivationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionBasedActivationStarting__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionBasedActivationStarting__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionBasedActivationStarting__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionBasedActivationStartingAccess().getStartingAssignment_1()); }
	(rule__ConditionBasedActivationStarting__StartingAssignment_1)?
	{ after(grammarAccess.getConditionBasedActivationStartingAccess().getStartingAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionBasedActivationEnding__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionBasedActivationEnding__Group__0__Impl
	rule__ConditionBasedActivationEnding__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionBasedActivationEnding__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionBasedActivationEndingAccess().getConditionBasedActivationAction_0()); }
	()
	{ after(grammarAccess.getConditionBasedActivationEndingAccess().getConditionBasedActivationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionBasedActivationEnding__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionBasedActivationEnding__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionBasedActivationEnding__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionBasedActivationEndingAccess().getEndingAssignment_1()); }
	(rule__ConditionBasedActivationEnding__EndingAssignment_1)?
	{ after(grammarAccess.getConditionBasedActivationEndingAccess().getEndingAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getConditionAction_0()); }
	()
	{ after(grammarAccess.getConditionAccess().getConditionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__1__Impl
	rule__Condition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getConditionAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__2__Impl
	rule__Condition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getCAssignment_2()); }
	(rule__Condition__CAssignment_2)?
	{ after(grammarAccess.getConditionAccess().getCAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getConditionAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BasicCondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasicCondition__Group__0__Impl
	rule__BasicCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicCondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicConditionAccess().getBasicConditionAction_0()); }
	()
	{ after(grammarAccess.getBasicConditionAccess().getBasicConditionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicCondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasicCondition__Group__1__Impl
	rule__BasicCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicCondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicConditionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getBasicConditionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicCondition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasicCondition__Group__2__Impl
	rule__BasicCondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicCondition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicConditionAccess().getLeftAssignment_2()); }
	(rule__BasicCondition__LeftAssignment_2)?
	{ after(grammarAccess.getBasicConditionAccess().getLeftAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicCondition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasicCondition__Group__3__Impl
	rule__BasicCondition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicCondition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicConditionAccess().getBincompAssignment_3()); }
	(rule__BasicCondition__BincompAssignment_3)
	{ after(grammarAccess.getBasicConditionAccess().getBincompAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicCondition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasicCondition__Group__4__Impl
	rule__BasicCondition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicCondition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicConditionAccess().getRightAssignment_4()); }
	(rule__BasicCondition__RightAssignment_4)?
	{ after(grammarAccess.getBasicConditionAccess().getRightAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicCondition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasicCondition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicCondition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicConditionAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getBasicConditionAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeCondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeCondition__Group__0__Impl
	rule__CompositeCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeConditionAccess().getCompositeConditionAction_0()); }
	()
	{ after(grammarAccess.getCompositeConditionAccess().getCompositeConditionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeCondition__Group__1__Impl
	rule__CompositeCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeConditionAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getCompositeConditionAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCondition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeCondition__Group__2__Impl
	rule__CompositeCondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCondition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeConditionAccess().getLeftAssignment_2()); }
	(rule__CompositeCondition__LeftAssignment_2)?
	{ after(grammarAccess.getCompositeConditionAccess().getLeftAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCondition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeCondition__Group__3__Impl
	rule__CompositeCondition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCondition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeConditionAccess().getBinopAssignment_3()); }
	(rule__CompositeCondition__BinopAssignment_3)
	{ after(grammarAccess.getCompositeConditionAccess().getBinopAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCondition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeCondition__Group__4__Impl
	rule__CompositeCondition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCondition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeConditionAccess().getRightAssignment_4()); }
	(rule__CompositeCondition__RightAssignment_4)?
	{ after(grammarAccess.getCompositeConditionAccess().getRightAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCondition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeCondition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCondition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeConditionAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getCompositeConditionAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionVariable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionVariable__Group__0__Impl
	rule__ConditionVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionVariable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionVariableAccess().getConditionVariableAction_0()); }
	()
	{ after(grammarAccess.getConditionVariableAccess().getConditionVariableAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionVariable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionVariable__Group__1__Impl
	rule__ConditionVariable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionVariable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionVariableAccess().getCommercialAtKeyword_1()); }
	'@'
	{ after(grammarAccess.getConditionVariableAccess().getCommercialAtKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionVariable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionVariable__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionVariable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionVariableAccess().getMetricAssignment_2()); }
	(rule__ConditionVariable__MetricAssignment_2)?
	{ after(grammarAccess.getConditionVariableAccess().getMetricAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionInteger__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionInteger__Group__0__Impl
	rule__ConditionInteger__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionInteger__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionIntegerAccess().getConditionIntegerAction_0()); }
	()
	{ after(grammarAccess.getConditionIntegerAccess().getConditionIntegerAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionInteger__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionInteger__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionInteger__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionIntegerAccess().getValueAssignment_1()); }
	(rule__ConditionInteger__ValueAssignment_1)
	{ after(grammarAccess.getConditionIntegerAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionBasedActivationStarting__StartingAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionBasedActivationStartingAccess().getStartingConditionParserRuleCall_1_0()); }
		ruleCondition
		{ after(grammarAccess.getConditionBasedActivationStartingAccess().getStartingConditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionBasedActivationEnding__EndingAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionBasedActivationEndingAccess().getEndingConditionParserRuleCall_1_0()); }
		ruleCondition
		{ after(grammarAccess.getConditionBasedActivationEndingAccess().getEndingConditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__CAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getCConditionElementParserRuleCall_2_0()); }
		ruleConditionElement
		{ after(grammarAccess.getConditionAccess().getCConditionElementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicCondition__LeftAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicConditionAccess().getLeftConditionVariableParserRuleCall_2_0()); }
		ruleConditionVariable
		{ after(grammarAccess.getBasicConditionAccess().getLeftConditionVariableParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicCondition__BincompAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicConditionAccess().getBincompBinaryComparisonOperationEnumRuleCall_3_0()); }
		ruleBinaryComparisonOperation
		{ after(grammarAccess.getBasicConditionAccess().getBincompBinaryComparisonOperationEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicCondition__RightAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicConditionAccess().getRightConditionExprParserRuleCall_4_0()); }
		ruleConditionExpr
		{ after(grammarAccess.getBasicConditionAccess().getRightConditionExprParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCondition__LeftAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositeConditionAccess().getLeftConditionElementParserRuleCall_2_0()); }
		ruleConditionElement
		{ after(grammarAccess.getCompositeConditionAccess().getLeftConditionElementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCondition__BinopAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositeConditionAccess().getBinopBinaryLogicalOperationEnumRuleCall_3_0()); }
		ruleBinaryLogicalOperation
		{ after(grammarAccess.getCompositeConditionAccess().getBinopBinaryLogicalOperationEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeCondition__RightAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositeConditionAccess().getRightConditionElementParserRuleCall_4_0()); }
		ruleConditionElement
		{ after(grammarAccess.getCompositeConditionAccess().getRightConditionElementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionVariable__MetricAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionVariableAccess().getMetricMetricCrossReference_2_0()); }
		(
			{ before(grammarAccess.getConditionVariableAccess().getMetricMetricIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getConditionVariableAccess().getMetricMetricIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getConditionVariableAccess().getMetricMetricCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionInteger__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionIntegerAccess().getValueEIntParserRuleCall_1_0()); }
		ruleEInt
		{ after(grammarAccess.getConditionIntegerAccess().getValueEIntParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

// automatically generated by Xtext
grammar sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/TestingMM/model/TestingMM.ecore#//Metrics" as Metrics
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/TestingMM/model/TestingMM.ecore#//MRSPackage" as MRSPackage
import "platform:/resource/TestingMM/model/TestingMM.ecore#//Results" as Results
import "platform:/resource/TestingMM/model/TestingMM.ecore" as TestingPackage
import "platform:/resource/TestingMM/model/TestingMM.ecore#//FuzzingOperations" as FuzzingOperations
import "platform:/resource/TestingMM/model/TestingMM.ecore#//StandardGrammar" as StandardGrammar


MainRules returns FuzzingOperations::ConditionBasedActivation:
	ConditionBasedActivationStarting | ConditionBasedActivationEnding;

ConditionBasedActivationStarting returns FuzzingOperations::ConditionBasedActivation:
	{FuzzingOperations::ConditionBasedActivation}
	(starting=Condition)?
	;

ConditionBasedActivationEnding returns FuzzingOperations::ConditionBasedActivation:
	{FuzzingOperations::ConditionBasedActivation}
	(ending=Condition)?
	;	

Condition returns StandardGrammar::Condition:
	{StandardGrammar::Condition}
	'[' (c=ConditionElement)? ']';

ConditionElement returns StandardGrammar::ConditionElement:
	CompositeCondition | BasicCondition;


BasicCondition returns StandardGrammar::BasicCondition:
	{StandardGrammar::BasicCondition}
	'(' (left=ConditionVariable)? bincomp=BinaryComparisonOperation (right=ConditionExpr)? ')';

CompositeCondition returns StandardGrammar::CompositeCondition:
	{StandardGrammar::CompositeCondition}
	'{' (left=ConditionElement)? binop=BinaryLogicalOperation  (right=ConditionElement)? '}';

ConditionExpr returns StandardGrammar::ConditionExpr:
	ConditionInteger | ConditionVariable;

ConditionVariable returns StandardGrammar::ConditionVariable:
	{StandardGrammar::ConditionVariable}
	'@' (metric=[Metrics::Metric])?;

ConditionInteger returns StandardGrammar::ConditionInteger:
	{StandardGrammar::ConditionInteger}
	value=EInt;


enum BinaryComparisonOperation returns StandardGrammar::BinaryComparisonOperation:
	LESS_THAN = '<' | GREATER_THAN = '>' | EQUALS = '=';

enum BinaryLogicalOperation returns StandardGrammar::BinaryLogicalOperation:
	AND = 'AND' | OR = 'OR';
		
EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;
	
EBoolean returns ecore::EBoolean:
	'true' | 'false';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
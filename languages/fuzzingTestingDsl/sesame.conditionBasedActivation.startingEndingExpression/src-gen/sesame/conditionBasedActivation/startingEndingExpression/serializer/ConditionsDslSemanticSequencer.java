/*
 * generated by Xtext 2.36.0
 */
package sesame.conditionBasedActivation.startingEndingExpression.serializer;

import TestingPackage.FuzzingOperations.ConditionBasedActivation;
import TestingPackage.FuzzingOperations.FuzzingOperationsPackage;
import TestingPackage.StandardGrammar.BasicCondition;
import TestingPackage.StandardGrammar.CompositeCondition;
import TestingPackage.StandardGrammar.Condition;
import TestingPackage.StandardGrammar.ConditionInteger;
import TestingPackage.StandardGrammar.ConditionVariable;
import TestingPackage.StandardGrammar.StandardGrammarPackage;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import sesame.conditionBasedActivation.startingEndingExpression.services.ConditionsDslGrammarAccess;

@SuppressWarnings("all")
public class ConditionsDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ConditionsDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FuzzingOperationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FuzzingOperationsPackage.CONDITION_BASED_ACTIVATION:
				if (rule == grammarAccess.getConditionBasedActivationEndingRule()) {
					sequence_ConditionBasedActivationEnding(context, (ConditionBasedActivation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMainRulesRule()) {
					sequence_ConditionBasedActivationEnding_ConditionBasedActivationStarting(context, (ConditionBasedActivation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConditionBasedActivationStartingRule()) {
					sequence_ConditionBasedActivationStarting(context, (ConditionBasedActivation) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == StandardGrammarPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StandardGrammarPackage.BASIC_CONDITION:
				sequence_BasicCondition(context, (BasicCondition) semanticObject); 
				return; 
			case StandardGrammarPackage.COMPOSITE_CONDITION:
				sequence_CompositeCondition(context, (CompositeCondition) semanticObject); 
				return; 
			case StandardGrammarPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case StandardGrammarPackage.CONDITION_INTEGER:
				sequence_ConditionInteger(context, (ConditionInteger) semanticObject); 
				return; 
			case StandardGrammarPackage.CONDITION_VARIABLE:
				sequence_ConditionVariable(context, (ConditionVariable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionElement returns BasicCondition
	 *     BasicCondition returns BasicCondition
	 *
	 * Constraint:
	 *     (left=ConditionVariable? bincomp=BinaryComparisonOperation right=ConditionExpr?)
	 * </pre>
	 */
	protected void sequence_BasicCondition(ISerializationContext context, BasicCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionElement returns CompositeCondition
	 *     CompositeCondition returns CompositeCondition
	 *
	 * Constraint:
	 *     (left=ConditionElement? binop=BinaryLogicalOperation right=ConditionElement?)
	 * </pre>
	 */
	protected void sequence_CompositeCondition(ISerializationContext context, CompositeCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionBasedActivationEnding returns ConditionBasedActivation
	 *
	 * Constraint:
	 *     ending=Condition?
	 * </pre>
	 */
	protected void sequence_ConditionBasedActivationEnding(ISerializationContext context, ConditionBasedActivation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MainRules returns ConditionBasedActivation
	 *
	 * Constraint:
	 *     (starting=Condition | ending=Condition)?
	 * </pre>
	 */
	protected void sequence_ConditionBasedActivationEnding_ConditionBasedActivationStarting(ISerializationContext context, ConditionBasedActivation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionBasedActivationStarting returns ConditionBasedActivation
	 *
	 * Constraint:
	 *     starting=Condition?
	 * </pre>
	 */
	protected void sequence_ConditionBasedActivationStarting(ISerializationContext context, ConditionBasedActivation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionExpr returns ConditionInteger
	 *     ConditionInteger returns ConditionInteger
	 *
	 * Constraint:
	 *     value=EInt
	 * </pre>
	 */
	protected void sequence_ConditionInteger(ISerializationContext context, ConditionInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StandardGrammarPackage.Literals.CONDITION_INTEGER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StandardGrammarPackage.Literals.CONDITION_INTEGER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionIntegerAccess().getValueEIntParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionExpr returns ConditionVariable
	 *     ConditionVariable returns ConditionVariable
	 *
	 * Constraint:
	 *     metric=[Metric|ID]?
	 * </pre>
	 */
	protected void sequence_ConditionVariable(ISerializationContext context, ConditionVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     c=ConditionElement?
	 * </pre>
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

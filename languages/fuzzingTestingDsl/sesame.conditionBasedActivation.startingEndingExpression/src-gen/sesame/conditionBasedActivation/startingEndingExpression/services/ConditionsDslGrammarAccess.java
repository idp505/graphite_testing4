/*
 * generated by Xtext 2.36.0
 */
package sesame.conditionBasedActivation.startingEndingExpression.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ConditionsDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MainRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.MainRules");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionBasedActivationStartingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionBasedActivationEndingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MainRules returns FuzzingOperations::ConditionBasedActivation:
		//    ConditionBasedActivationStarting | ConditionBasedActivationEnding;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionBasedActivationStarting | ConditionBasedActivationEnding
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConditionBasedActivationStarting
		public RuleCall getConditionBasedActivationStartingParserRuleCall_0() { return cConditionBasedActivationStartingParserRuleCall_0; }
		
		//ConditionBasedActivationEnding
		public RuleCall getConditionBasedActivationEndingParserRuleCall_1() { return cConditionBasedActivationEndingParserRuleCall_1; }
	}
	public class ConditionBasedActivationStartingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.ConditionBasedActivationStarting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionBasedActivationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStartingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartingConditionParserRuleCall_1_0 = (RuleCall)cStartingAssignment_1.eContents().get(0);
		
		//ConditionBasedActivationStarting returns FuzzingOperations::ConditionBasedActivation:
		//    {FuzzingOperations::ConditionBasedActivation}
		//    (starting=Condition)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{FuzzingOperations::ConditionBasedActivation}
		//(starting=Condition)?
		public Group getGroup() { return cGroup; }
		
		//{FuzzingOperations::ConditionBasedActivation}
		public Action getConditionBasedActivationAction_0() { return cConditionBasedActivationAction_0; }
		
		//(starting=Condition)?
		public Assignment getStartingAssignment_1() { return cStartingAssignment_1; }
		
		//Condition
		public RuleCall getStartingConditionParserRuleCall_1_0() { return cStartingConditionParserRuleCall_1_0; }
	}
	public class ConditionBasedActivationEndingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.ConditionBasedActivationEnding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionBasedActivationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEndingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEndingConditionParserRuleCall_1_0 = (RuleCall)cEndingAssignment_1.eContents().get(0);
		
		//ConditionBasedActivationEnding returns FuzzingOperations::ConditionBasedActivation:
		//    {FuzzingOperations::ConditionBasedActivation}
		//    (ending=Condition)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{FuzzingOperations::ConditionBasedActivation}
		//(ending=Condition)?
		public Group getGroup() { return cGroup; }
		
		//{FuzzingOperations::ConditionBasedActivation}
		public Action getConditionBasedActivationAction_0() { return cConditionBasedActivationAction_0; }
		
		//(ending=Condition)?
		public Assignment getEndingAssignment_1() { return cEndingAssignment_1; }
		
		//Condition
		public RuleCall getEndingConditionParserRuleCall_1_0() { return cEndingConditionParserRuleCall_1_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCConditionElementParserRuleCall_2_0 = (RuleCall)cCAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Condition returns StandardGrammar::Condition:
		//    {StandardGrammar::Condition}
		//    '[' (c=ConditionElement)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{StandardGrammar::Condition}
		//'[' (c=ConditionElement)? ']'
		public Group getGroup() { return cGroup; }
		
		//{StandardGrammar::Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(c=ConditionElement)?
		public Assignment getCAssignment_2() { return cCAssignment_2; }
		
		//ConditionElement
		public RuleCall getCConditionElementParserRuleCall_2_0() { return cCConditionElementParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ConditionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.ConditionElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBasicConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConditionElement returns StandardGrammar::ConditionElement:
		//    CompositeCondition | BasicCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//CompositeCondition | BasicCondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CompositeCondition
		public RuleCall getCompositeConditionParserRuleCall_0() { return cCompositeConditionParserRuleCall_0; }
		
		//BasicCondition
		public RuleCall getBasicConditionParserRuleCall_1() { return cBasicConditionParserRuleCall_1; }
	}
	public class BasicConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.BasicCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBasicConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftConditionVariableParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Assignment cBincompAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBincompBinaryComparisonOperationEnumRuleCall_3_0 = (RuleCall)cBincompAssignment_3.eContents().get(0);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightConditionExprParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BasicCondition returns StandardGrammar::BasicCondition:
		//    {StandardGrammar::BasicCondition}
		//    '(' (left=ConditionVariable)? bincomp=BinaryComparisonOperation (right=ConditionExpr)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{StandardGrammar::BasicCondition}
		//'(' (left=ConditionVariable)? bincomp=BinaryComparisonOperation (right=ConditionExpr)? ')'
		public Group getGroup() { return cGroup; }
		
		//{StandardGrammar::BasicCondition}
		public Action getBasicConditionAction_0() { return cBasicConditionAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(left=ConditionVariable)?
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//ConditionVariable
		public RuleCall getLeftConditionVariableParserRuleCall_2_0() { return cLeftConditionVariableParserRuleCall_2_0; }
		
		//bincomp=BinaryComparisonOperation
		public Assignment getBincompAssignment_3() { return cBincompAssignment_3; }
		
		//BinaryComparisonOperation
		public RuleCall getBincompBinaryComparisonOperationEnumRuleCall_3_0() { return cBincompBinaryComparisonOperationEnumRuleCall_3_0; }
		
		//(right=ConditionExpr)?
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//ConditionExpr
		public RuleCall getRightConditionExprParserRuleCall_4_0() { return cRightConditionExprParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CompositeConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.CompositeCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftConditionElementParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Assignment cBinopAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBinopBinaryLogicalOperationEnumRuleCall_3_0 = (RuleCall)cBinopAssignment_3.eContents().get(0);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightConditionElementParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CompositeCondition returns StandardGrammar::CompositeCondition:
		//    {StandardGrammar::CompositeCondition}
		//    '{' (left=ConditionElement)? binop=BinaryLogicalOperation  (right=ConditionElement)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{StandardGrammar::CompositeCondition}
		//'{' (left=ConditionElement)? binop=BinaryLogicalOperation  (right=ConditionElement)? '}'
		public Group getGroup() { return cGroup; }
		
		//{StandardGrammar::CompositeCondition}
		public Action getCompositeConditionAction_0() { return cCompositeConditionAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(left=ConditionElement)?
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//ConditionElement
		public RuleCall getLeftConditionElementParserRuleCall_2_0() { return cLeftConditionElementParserRuleCall_2_0; }
		
		//binop=BinaryLogicalOperation
		public Assignment getBinopAssignment_3() { return cBinopAssignment_3; }
		
		//BinaryLogicalOperation
		public RuleCall getBinopBinaryLogicalOperationEnumRuleCall_3_0() { return cBinopBinaryLogicalOperationEnumRuleCall_3_0; }
		
		//(right=ConditionElement)?
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//ConditionElement
		public RuleCall getRightConditionElementParserRuleCall_4_0() { return cRightConditionElementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ConditionExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.ConditionExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConditionExpr returns StandardGrammar::ConditionExpr:
		//    ConditionInteger | ConditionVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionInteger | ConditionVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConditionInteger
		public RuleCall getConditionIntegerParserRuleCall_0() { return cConditionIntegerParserRuleCall_0; }
		
		//ConditionVariable
		public RuleCall getConditionVariableParserRuleCall_1() { return cConditionVariableParserRuleCall_1; }
	}
	public class ConditionVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.ConditionVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMetricAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMetricMetricCrossReference_2_0 = (CrossReference)cMetricAssignment_2.eContents().get(0);
		private final RuleCall cMetricMetricIDTerminalRuleCall_2_0_1 = (RuleCall)cMetricMetricCrossReference_2_0.eContents().get(1);
		
		//ConditionVariable returns StandardGrammar::ConditionVariable:
		//    {StandardGrammar::ConditionVariable}
		//    '@' (metric=[Metrics::Metric])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{StandardGrammar::ConditionVariable}
		//'@' (metric=[Metrics::Metric])?
		public Group getGroup() { return cGroup; }
		
		//{StandardGrammar::ConditionVariable}
		public Action getConditionVariableAction_0() { return cConditionVariableAction_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }
		
		//(metric=[Metrics::Metric])?
		public Assignment getMetricAssignment_2() { return cMetricAssignment_2; }
		
		//[Metrics::Metric]
		public CrossReference getMetricMetricCrossReference_2_0() { return cMetricMetricCrossReference_2_0; }
		
		//ID
		public RuleCall getMetricMetricIDTerminalRuleCall_2_0_1() { return cMetricMetricIDTerminalRuleCall_2_0_1; }
	}
	public class ConditionIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.ConditionInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionIntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ConditionInteger returns StandardGrammar::ConditionInteger:
		//    {StandardGrammar::ConditionInteger}
		//    value=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//{StandardGrammar::ConditionInteger}
		//value=EInt
		public Group getGroup() { return cGroup; }
		
		//{StandardGrammar::ConditionInteger}
		public Action getConditionIntegerAction_0() { return cConditionIntegerAction_0; }
		
		//value=EInt
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_1_0() { return cValueEIntParserRuleCall_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	
	public class BinaryComparisonOperationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.BinaryComparisonOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESS_THANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESS_THANLessThanSignKeyword_0_0 = (Keyword)cLESS_THANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATER_THANGreaterThanSignKeyword_1_0 = (Keyword)cGREATER_THANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQUALSEqualsSignKeyword_2_0 = (Keyword)cEQUALSEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BinaryComparisonOperation returns StandardGrammar::BinaryComparisonOperation:
		//    LESS_THAN = '<' | GREATER_THAN = '>' | EQUALS = '=';
		public EnumRule getRule() { return rule; }
		
		//LESS_THAN = '<' | GREATER_THAN = '>' | EQUALS = '='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LESS_THAN = '<'
		public EnumLiteralDeclaration getLESS_THANEnumLiteralDeclaration_0() { return cLESS_THANEnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getLESS_THANLessThanSignKeyword_0_0() { return cLESS_THANLessThanSignKeyword_0_0; }
		
		//GREATER_THAN = '>'
		public EnumLiteralDeclaration getGREATER_THANEnumLiteralDeclaration_1() { return cGREATER_THANEnumLiteralDeclaration_1; }
		
		//'>'
		public Keyword getGREATER_THANGreaterThanSignKeyword_1_0() { return cGREATER_THANGreaterThanSignKeyword_1_0; }
		
		//EQUALS = '='
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_2() { return cEQUALSEnumLiteralDeclaration_2; }
		
		//'='
		public Keyword getEQUALSEqualsSignKeyword_2_0() { return cEQUALSEqualsSignKeyword_2_0; }
	}
	public class BinaryLogicalOperationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.BinaryLogicalOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORORKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BinaryLogicalOperation returns StandardGrammar::BinaryLogicalOperation:
		//    AND = 'AND' | OR = 'OR';
		public EnumRule getRule() { return rule; }
		
		//AND = 'AND' | OR = 'OR'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND = 'AND'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'AND'
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }
		
		//OR = 'OR'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'OR'
		public Keyword getORORKeyword_1_0() { return cORORKeyword_1_0; }
	}
	
	private final MainRulesElements pMainRules;
	private final ConditionBasedActivationStartingElements pConditionBasedActivationStarting;
	private final ConditionBasedActivationEndingElements pConditionBasedActivationEnding;
	private final ConditionElements pCondition;
	private final ConditionElementElements pConditionElement;
	private final BasicConditionElements pBasicCondition;
	private final CompositeConditionElements pCompositeCondition;
	private final ConditionExprElements pConditionExpr;
	private final ConditionVariableElements pConditionVariable;
	private final ConditionIntegerElements pConditionInteger;
	private final BinaryComparisonOperationElements eBinaryComparisonOperation;
	private final BinaryLogicalOperationElements eBinaryLogicalOperation;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final EBooleanElements pEBoolean;
	private final EDoubleElements pEDouble;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ConditionsDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMainRules = new MainRulesElements();
		this.pConditionBasedActivationStarting = new ConditionBasedActivationStartingElements();
		this.pConditionBasedActivationEnding = new ConditionBasedActivationEndingElements();
		this.pCondition = new ConditionElements();
		this.pConditionElement = new ConditionElementElements();
		this.pBasicCondition = new BasicConditionElements();
		this.pCompositeCondition = new CompositeConditionElements();
		this.pConditionExpr = new ConditionExprElements();
		this.pConditionVariable = new ConditionVariableElements();
		this.pConditionInteger = new ConditionIntegerElements();
		this.eBinaryComparisonOperation = new BinaryComparisonOperationElements();
		this.eBinaryLogicalOperation = new BinaryLogicalOperationElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pEBoolean = new EBooleanElements();
		this.pEDouble = new EDoubleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MainRules returns FuzzingOperations::ConditionBasedActivation:
	//    ConditionBasedActivationStarting | ConditionBasedActivationEnding;
	public MainRulesElements getMainRulesAccess() {
		return pMainRules;
	}
	
	public ParserRule getMainRulesRule() {
		return getMainRulesAccess().getRule();
	}
	
	//ConditionBasedActivationStarting returns FuzzingOperations::ConditionBasedActivation:
	//    {FuzzingOperations::ConditionBasedActivation}
	//    (starting=Condition)?
	//    ;
	public ConditionBasedActivationStartingElements getConditionBasedActivationStartingAccess() {
		return pConditionBasedActivationStarting;
	}
	
	public ParserRule getConditionBasedActivationStartingRule() {
		return getConditionBasedActivationStartingAccess().getRule();
	}
	
	//ConditionBasedActivationEnding returns FuzzingOperations::ConditionBasedActivation:
	//    {FuzzingOperations::ConditionBasedActivation}
	//    (ending=Condition)?
	//    ;
	public ConditionBasedActivationEndingElements getConditionBasedActivationEndingAccess() {
		return pConditionBasedActivationEnding;
	}
	
	public ParserRule getConditionBasedActivationEndingRule() {
		return getConditionBasedActivationEndingAccess().getRule();
	}
	
	//Condition returns StandardGrammar::Condition:
	//    {StandardGrammar::Condition}
	//    '[' (c=ConditionElement)? ']';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//ConditionElement returns StandardGrammar::ConditionElement:
	//    CompositeCondition | BasicCondition;
	public ConditionElementElements getConditionElementAccess() {
		return pConditionElement;
	}
	
	public ParserRule getConditionElementRule() {
		return getConditionElementAccess().getRule();
	}
	
	//BasicCondition returns StandardGrammar::BasicCondition:
	//    {StandardGrammar::BasicCondition}
	//    '(' (left=ConditionVariable)? bincomp=BinaryComparisonOperation (right=ConditionExpr)? ')';
	public BasicConditionElements getBasicConditionAccess() {
		return pBasicCondition;
	}
	
	public ParserRule getBasicConditionRule() {
		return getBasicConditionAccess().getRule();
	}
	
	//CompositeCondition returns StandardGrammar::CompositeCondition:
	//    {StandardGrammar::CompositeCondition}
	//    '{' (left=ConditionElement)? binop=BinaryLogicalOperation  (right=ConditionElement)? '}';
	public CompositeConditionElements getCompositeConditionAccess() {
		return pCompositeCondition;
	}
	
	public ParserRule getCompositeConditionRule() {
		return getCompositeConditionAccess().getRule();
	}
	
	//ConditionExpr returns StandardGrammar::ConditionExpr:
	//    ConditionInteger | ConditionVariable;
	public ConditionExprElements getConditionExprAccess() {
		return pConditionExpr;
	}
	
	public ParserRule getConditionExprRule() {
		return getConditionExprAccess().getRule();
	}
	
	//ConditionVariable returns StandardGrammar::ConditionVariable:
	//    {StandardGrammar::ConditionVariable}
	//    '@' (metric=[Metrics::Metric])?;
	public ConditionVariableElements getConditionVariableAccess() {
		return pConditionVariable;
	}
	
	public ParserRule getConditionVariableRule() {
		return getConditionVariableAccess().getRule();
	}
	
	//ConditionInteger returns StandardGrammar::ConditionInteger:
	//    {StandardGrammar::ConditionInteger}
	//    value=EInt;
	public ConditionIntegerElements getConditionIntegerAccess() {
		return pConditionInteger;
	}
	
	public ParserRule getConditionIntegerRule() {
		return getConditionIntegerAccess().getRule();
	}
	
	//enum BinaryComparisonOperation returns StandardGrammar::BinaryComparisonOperation:
	//    LESS_THAN = '<' | GREATER_THAN = '>' | EQUALS = '=';
	public BinaryComparisonOperationElements getBinaryComparisonOperationAccess() {
		return eBinaryComparisonOperation;
	}
	
	public EnumRule getBinaryComparisonOperationRule() {
		return getBinaryComparisonOperationAccess().getRule();
	}
	
	//enum BinaryLogicalOperation returns StandardGrammar::BinaryLogicalOperation:
	//    AND = 'AND' | OR = 'OR';
	public BinaryLogicalOperationElements getBinaryLogicalOperationAccess() {
		return eBinaryLogicalOperation;
	}
	
	public EnumRule getBinaryLogicalOperationRule() {
		return getBinaryLogicalOperationAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EDouble returns ecore::EDouble:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

/*
 * generated by Xtext 2.36.0
 */
grammar InternalConditionsDsl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package sesame.conditionBasedActivation.startingEndingExpression.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package sesame.conditionBasedActivation.startingEndingExpression.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import sesame.conditionBasedActivation.startingEndingExpression.services.ConditionsDslGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private ConditionsDslGrammarAccess grammarAccess;

    public InternalConditionsDslParser(TokenStream input, ConditionsDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MainRules";
   	}

   	@Override
   	protected ConditionsDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMainRules
entryRuleMainRules returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainRulesRule()); }
	iv_ruleMainRules=ruleMainRules
	{ $current=$iv_ruleMainRules.current; }
	EOF;

// Rule MainRules
ruleMainRules returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMainRulesAccess().getConditionBasedActivationStartingParserRuleCall_0());
		}
		this_ConditionBasedActivationStarting_0=ruleConditionBasedActivationStarting
		{
			$current = $this_ConditionBasedActivationStarting_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMainRulesAccess().getConditionBasedActivationEndingParserRuleCall_1());
		}
		this_ConditionBasedActivationEnding_1=ruleConditionBasedActivationEnding
		{
			$current = $this_ConditionBasedActivationEnding_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConditionBasedActivationStarting
entryRuleConditionBasedActivationStarting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionBasedActivationStartingRule()); }
	iv_ruleConditionBasedActivationStarting=ruleConditionBasedActivationStarting
	{ $current=$iv_ruleConditionBasedActivationStarting.current; }
	EOF;

// Rule ConditionBasedActivationStarting
ruleConditionBasedActivationStarting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getConditionBasedActivationStartingAccess().getConditionBasedActivationAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionBasedActivationStartingAccess().getStartingConditionParserRuleCall_1_0());
				}
				lv_starting_1_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionBasedActivationStartingRule());
					}
					set(
						$current,
						"starting",
						lv_starting_1_0,
						"sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleConditionBasedActivationEnding
entryRuleConditionBasedActivationEnding returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionBasedActivationEndingRule()); }
	iv_ruleConditionBasedActivationEnding=ruleConditionBasedActivationEnding
	{ $current=$iv_ruleConditionBasedActivationEnding.current; }
	EOF;

// Rule ConditionBasedActivationEnding
ruleConditionBasedActivationEnding returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getConditionBasedActivationEndingAccess().getConditionBasedActivationAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionBasedActivationEndingAccess().getEndingConditionParserRuleCall_1_0());
				}
				lv_ending_1_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionBasedActivationEndingRule());
					}
					set(
						$current,
						"ending",
						lv_ending_1_0,
						"sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getConditionAccess().getConditionAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getCConditionElementParserRuleCall_2_0());
				}
				lv_c_2_0=ruleConditionElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"c",
						lv_c_2_0,
						"sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.ConditionElement");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getConditionAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleConditionElement
entryRuleConditionElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionElementRule()); }
	iv_ruleConditionElement=ruleConditionElement
	{ $current=$iv_ruleConditionElement.current; }
	EOF;

// Rule ConditionElement
ruleConditionElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getConditionElementAccess().getCompositeConditionParserRuleCall_0());
		}
		this_CompositeCondition_0=ruleCompositeCondition
		{
			$current = $this_CompositeCondition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getConditionElementAccess().getBasicConditionParserRuleCall_1());
		}
		this_BasicCondition_1=ruleBasicCondition
		{
			$current = $this_BasicCondition_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBasicCondition
entryRuleBasicCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicConditionRule()); }
	iv_ruleBasicCondition=ruleBasicCondition
	{ $current=$iv_ruleBasicCondition.current; }
	EOF;

// Rule BasicCondition
ruleBasicCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getBasicConditionAccess().getBasicConditionAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getBasicConditionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicConditionAccess().getLeftConditionVariableParserRuleCall_2_0());
				}
				lv_left_2_0=ruleConditionVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicConditionRule());
					}
					set(
						$current,
						"left",
						lv_left_2_0,
						"sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.ConditionVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicConditionAccess().getBincompBinaryComparisonOperationEnumRuleCall_3_0());
				}
				lv_bincomp_3_0=ruleBinaryComparisonOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicConditionRule());
					}
					set(
						$current,
						"bincomp",
						lv_bincomp_3_0,
						"sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.BinaryComparisonOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicConditionAccess().getRightConditionExprParserRuleCall_4_0());
				}
				lv_right_4_0=ruleConditionExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicConditionRule());
					}
					set(
						$current,
						"right",
						lv_right_4_0,
						"sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.ConditionExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getBasicConditionAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleCompositeCondition
entryRuleCompositeCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompositeConditionRule()); }
	iv_ruleCompositeCondition=ruleCompositeCondition
	{ $current=$iv_ruleCompositeCondition.current; }
	EOF;

// Rule CompositeCondition
ruleCompositeCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getCompositeConditionAccess().getCompositeConditionAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCompositeConditionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositeConditionAccess().getLeftConditionElementParserRuleCall_2_0());
				}
				lv_left_2_0=ruleConditionElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositeConditionRule());
					}
					set(
						$current,
						"left",
						lv_left_2_0,
						"sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.ConditionElement");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositeConditionAccess().getBinopBinaryLogicalOperationEnumRuleCall_3_0());
				}
				lv_binop_3_0=ruleBinaryLogicalOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositeConditionRule());
					}
					set(
						$current,
						"binop",
						lv_binop_3_0,
						"sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.BinaryLogicalOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositeConditionAccess().getRightConditionElementParserRuleCall_4_0());
				}
				lv_right_4_0=ruleConditionElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositeConditionRule());
					}
					set(
						$current,
						"right",
						lv_right_4_0,
						"sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.ConditionElement");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getCompositeConditionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleConditionExpr
entryRuleConditionExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionExprRule()); }
	iv_ruleConditionExpr=ruleConditionExpr
	{ $current=$iv_ruleConditionExpr.current; }
	EOF;

// Rule ConditionExpr
ruleConditionExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getConditionExprAccess().getConditionIntegerParserRuleCall_0());
		}
		this_ConditionInteger_0=ruleConditionInteger
		{
			$current = $this_ConditionInteger_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getConditionExprAccess().getConditionVariableParserRuleCall_1());
		}
		this_ConditionVariable_1=ruleConditionVariable
		{
			$current = $this_ConditionVariable_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConditionVariable
entryRuleConditionVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionVariableRule()); }
	iv_ruleConditionVariable=ruleConditionVariable
	{ $current=$iv_ruleConditionVariable.current; }
	EOF;

// Rule ConditionVariable
ruleConditionVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getConditionVariableAccess().getConditionVariableAction_0(),
					$current);
			}
		)
		otherlv_1='@'
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionVariableAccess().getCommercialAtKeyword_1());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionVariableRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getConditionVariableAccess().getMetricMetricCrossReference_2_0());
				}
			)
		)?
	)
;

// Entry rule entryRuleConditionInteger
entryRuleConditionInteger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionIntegerRule()); }
	iv_ruleConditionInteger=ruleConditionInteger
	{ $current=$iv_ruleConditionInteger.current; }
	EOF;

// Rule ConditionInteger
ruleConditionInteger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getConditionIntegerAccess().getConditionIntegerAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionIntegerAccess().getValueEIntParserRuleCall_1_0());
				}
				lv_value_1_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionIntegerRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"sesame.conditionBasedActivation.startingEndingExpression.ConditionsDsl.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Rule BinaryComparisonOperation
ruleBinaryComparisonOperation returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<'
			{
				$current = grammarAccess.getBinaryComparisonOperationAccess().getLESS_THANEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBinaryComparisonOperationAccess().getLESS_THANEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>'
			{
				$current = grammarAccess.getBinaryComparisonOperationAccess().getGREATER_THANEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBinaryComparisonOperationAccess().getGREATER_THANEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='='
			{
				$current = grammarAccess.getBinaryComparisonOperationAccess().getEQUALSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBinaryComparisonOperationAccess().getEQUALSEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule BinaryLogicalOperation
ruleBinaryLogicalOperation returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='AND'
			{
				$current = grammarAccess.getBinaryLogicalOperationAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBinaryLogicalOperationAccess().getANDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='OR'
			{
				$current = grammarAccess.getBinaryLogicalOperationAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBinaryLogicalOperationAccess().getOREnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

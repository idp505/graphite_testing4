/**
 */
package structurizr.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import structurizr.util.StructurizrAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class StructurizrItemProviderAdapterFactory extends StructurizrAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StructurizrItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.Workspace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkspaceItemProvider workspaceItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.Workspace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkspaceAdapter() {
		if (workspaceItemProvider == null) {
			workspaceItemProvider = new WorkspaceItemProvider(this);
		}

		return workspaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.Configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationItemProvider configurationItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.Configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationAdapter() {
		if (configurationItemProvider == null) {
			configurationItemProvider = new ConfigurationItemProvider(this);
		}

		return configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.User} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserItemProvider userItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.User}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserAdapter() {
		if (userItemProvider == null) {
			userItemProvider = new UserItemProvider(this);
		}

		return userItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.Relationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationshipItemProvider relationshipItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.Relationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationshipAdapter() {
		if (relationshipItemProvider == null) {
			relationshipItemProvider = new RelationshipItemProvider(this);
		}

		return relationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.Tag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TagItemProvider tagItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.Tag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTagAdapter() {
		if (tagItemProvider == null) {
			tagItemProvider = new TagItemProvider(this);
		}

		return tagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.Technology} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TechnologyItemProvider technologyItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.Technology}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTechnologyAdapter() {
		if (technologyItemProvider == null) {
			technologyItemProvider = new TechnologyItemProvider(this);
		}

		return technologyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.Perspective} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PerspectiveItemProvider perspectiveItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.Perspective}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPerspectiveAdapter() {
		if (perspectiveItemProvider == null) {
			perspectiveItemProvider = new PerspectiveItemProvider(this);
		}

		return perspectiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.Element} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementItemProvider elementItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.Element}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementAdapter() {
		if (elementItemProvider == null) {
			elementItemProvider = new ElementItemProvider(this);
		}

		return elementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.Person} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonItemProvider personItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.Person}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonAdapter() {
		if (personItemProvider == null) {
			personItemProvider = new PersonItemProvider(this);
		}

		return personItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.SoftwareSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftwareSystemItemProvider softwareSystemItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.SoftwareSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftwareSystemAdapter() {
		if (softwareSystemItemProvider == null) {
			softwareSystemItemProvider = new SoftwareSystemItemProvider(this);
		}

		return softwareSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.Container} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerItemProvider containerItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.Container}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerAdapter() {
		if (containerItemProvider == null) {
			containerItemProvider = new ContainerItemProvider(this);
		}

		return containerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentItemProvider componentItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAdapter() {
		if (componentItemProvider == null) {
			componentItemProvider = new ComponentItemProvider(this);
		}

		return componentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.DeploymentEnvironment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeploymentEnvironmentItemProvider deploymentEnvironmentItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.DeploymentEnvironment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeploymentEnvironmentAdapter() {
		if (deploymentEnvironmentItemProvider == null) {
			deploymentEnvironmentItemProvider = new DeploymentEnvironmentItemProvider(this);
		}

		return deploymentEnvironmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.DeploymentGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeploymentGroupItemProvider deploymentGroupItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.DeploymentGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeploymentGroupAdapter() {
		if (deploymentGroupItemProvider == null) {
			deploymentGroupItemProvider = new DeploymentGroupItemProvider(this);
		}

		return deploymentGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.DeploymentNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeploymentNodeItemProvider deploymentNodeItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.DeploymentNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeploymentNodeAdapter() {
		if (deploymentNodeItemProvider == null) {
			deploymentNodeItemProvider = new DeploymentNodeItemProvider(this);
		}

		return deploymentNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.InfrastructureNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfrastructureNodeItemProvider infrastructureNodeItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.InfrastructureNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfrastructureNodeAdapter() {
		if (infrastructureNodeItemProvider == null) {
			infrastructureNodeItemProvider = new InfrastructureNodeItemProvider(this);
		}

		return infrastructureNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.SoftwareSystemInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftwareSystemInstanceItemProvider softwareSystemInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.SoftwareSystemInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftwareSystemInstanceAdapter() {
		if (softwareSystemInstanceItemProvider == null) {
			softwareSystemInstanceItemProvider = new SoftwareSystemInstanceItemProvider(this);
		}

		return softwareSystemInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.ContainerInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerInstanceItemProvider containerInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.ContainerInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerInstanceAdapter() {
		if (containerInstanceItemProvider == null) {
			containerInstanceItemProvider = new ContainerInstanceItemProvider(this);
		}

		return containerInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.HealthCheck} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HealthCheckItemProvider healthCheckItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.HealthCheck}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHealthCheckAdapter() {
		if (healthCheckItemProvider == null) {
			healthCheckItemProvider = new HealthCheckItemProvider(this);
		}

		return healthCheckItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.Views} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewsItemProvider viewsItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.Views}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewsAdapter() {
		if (viewsItemProvider == null) {
			viewsItemProvider = new ViewsItemProvider(this);
		}

		return viewsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.SystemLandscapeView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemLandscapeViewItemProvider systemLandscapeViewItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.SystemLandscapeView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemLandscapeViewAdapter() {
		if (systemLandscapeViewItemProvider == null) {
			systemLandscapeViewItemProvider = new SystemLandscapeViewItemProvider(this);
		}

		return systemLandscapeViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.SystemContextView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemContextViewItemProvider systemContextViewItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.SystemContextView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemContextViewAdapter() {
		if (systemContextViewItemProvider == null) {
			systemContextViewItemProvider = new SystemContextViewItemProvider(this);
		}

		return systemContextViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.ContainerView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerViewItemProvider containerViewItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.ContainerView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerViewAdapter() {
		if (containerViewItemProvider == null) {
			containerViewItemProvider = new ContainerViewItemProvider(this);
		}

		return containerViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.ComponentView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentViewItemProvider componentViewItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.ComponentView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentViewAdapter() {
		if (componentViewItemProvider == null) {
			componentViewItemProvider = new ComponentViewItemProvider(this);
		}

		return componentViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.AutoLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AutoLayoutItemProvider autoLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.AutoLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAutoLayoutAdapter() {
		if (autoLayoutItemProvider == null) {
			autoLayoutItemProvider = new AutoLayoutItemProvider(this);
		}

		return autoLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.ElementStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementStyleItemProvider elementStyleItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.ElementStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementStyleAdapter() {
		if (elementStyleItemProvider == null) {
			elementStyleItemProvider = new ElementStyleItemProvider(this);
		}

		return elementStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.RelationshipStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationshipStyleItemProvider relationshipStyleItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.RelationshipStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationshipStyleAdapter() {
		if (relationshipStyleItemProvider == null) {
			relationshipStyleItemProvider = new RelationshipStyleItemProvider(this);
		}

		return relationshipStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.NoFilterCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NoFilterConditionItemProvider noFilterConditionItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.NoFilterCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNoFilterConditionAdapter() {
		if (noFilterConditionItemProvider == null) {
			noFilterConditionItemProvider = new NoFilterConditionItemProvider(this);
		}

		return noFilterConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.CompositeCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeConditionItemProvider compositeConditionItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.CompositeCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeConditionAdapter() {
		if (compositeConditionItemProvider == null) {
			compositeConditionItemProvider = new CompositeConditionItemProvider(this);
		}

		return compositeConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.ElementTagCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementTagConditionItemProvider elementTagConditionItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.ElementTagCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementTagConditionAdapter() {
		if (elementTagConditionItemProvider == null) {
			elementTagConditionItemProvider = new ElementTagConditionItemProvider(this);
		}

		return elementTagConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.ElementTechnologyCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementTechnologyConditionItemProvider elementTechnologyConditionItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.ElementTechnologyCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementTechnologyConditionAdapter() {
		if (elementTechnologyConditionItemProvider == null) {
			elementTechnologyConditionItemProvider = new ElementTechnologyConditionItemProvider(this);
		}

		return elementTechnologyConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.ElementTypeCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementTypeConditionItemProvider elementTypeConditionItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.ElementTypeCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementTypeConditionAdapter() {
		if (elementTypeConditionItemProvider == null) {
			elementTypeConditionItemProvider = new ElementTypeConditionItemProvider(this);
		}

		return elementTypeConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.ElementPropertyCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementPropertyConditionItemProvider elementPropertyConditionItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.ElementPropertyCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementPropertyConditionAdapter() {
		if (elementPropertyConditionItemProvider == null) {
			elementPropertyConditionItemProvider = new ElementPropertyConditionItemProvider(this);
		}

		return elementPropertyConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.ElementParentCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementParentConditionItemProvider elementParentConditionItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.ElementParentCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementParentConditionAdapter() {
		if (elementParentConditionItemProvider == null) {
			elementParentConditionItemProvider = new ElementParentConditionItemProvider(this);
		}

		return elementParentConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.RelationshipTagCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationshipTagConditionItemProvider relationshipTagConditionItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.RelationshipTagCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationshipTagConditionAdapter() {
		if (relationshipTagConditionItemProvider == null) {
			relationshipTagConditionItemProvider = new RelationshipTagConditionItemProvider(this);
		}

		return relationshipTagConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.RelationshipPropertyCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationshipPropertyConditionItemProvider relationshipPropertyConditionItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.RelationshipPropertyCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationshipPropertyConditionAdapter() {
		if (relationshipPropertyConditionItemProvider == null) {
			relationshipPropertyConditionItemProvider = new RelationshipPropertyConditionItemProvider(this);
		}

		return relationshipPropertyConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.RelationshipSourceCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationshipSourceConditionItemProvider relationshipSourceConditionItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.RelationshipSourceCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationshipSourceConditionAdapter() {
		if (relationshipSourceConditionItemProvider == null) {
			relationshipSourceConditionItemProvider = new RelationshipSourceConditionItemProvider(this);
		}

		return relationshipSourceConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structurizr.RelationshipDestinationCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationshipDestinationConditionItemProvider relationshipDestinationConditionItemProvider;

	/**
	 * This creates an adapter for a {@link structurizr.RelationshipDestinationCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationshipDestinationConditionAdapter() {
		if (relationshipDestinationConditionItemProvider == null) {
			relationshipDestinationConditionItemProvider = new RelationshipDestinationConditionItemProvider(this);
		}

		return relationshipDestinationConditionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (workspaceItemProvider != null) workspaceItemProvider.dispose();
		if (configurationItemProvider != null) configurationItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (userItemProvider != null) userItemProvider.dispose();
		if (relationshipItemProvider != null) relationshipItemProvider.dispose();
		if (tagItemProvider != null) tagItemProvider.dispose();
		if (technologyItemProvider != null) technologyItemProvider.dispose();
		if (perspectiveItemProvider != null) perspectiveItemProvider.dispose();
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (elementItemProvider != null) elementItemProvider.dispose();
		if (personItemProvider != null) personItemProvider.dispose();
		if (softwareSystemItemProvider != null) softwareSystemItemProvider.dispose();
		if (containerItemProvider != null) containerItemProvider.dispose();
		if (componentItemProvider != null) componentItemProvider.dispose();
		if (deploymentEnvironmentItemProvider != null) deploymentEnvironmentItemProvider.dispose();
		if (deploymentGroupItemProvider != null) deploymentGroupItemProvider.dispose();
		if (deploymentNodeItemProvider != null) deploymentNodeItemProvider.dispose();
		if (infrastructureNodeItemProvider != null) infrastructureNodeItemProvider.dispose();
		if (softwareSystemInstanceItemProvider != null) softwareSystemInstanceItemProvider.dispose();
		if (containerInstanceItemProvider != null) containerInstanceItemProvider.dispose();
		if (healthCheckItemProvider != null) healthCheckItemProvider.dispose();
		if (viewsItemProvider != null) viewsItemProvider.dispose();
		if (systemLandscapeViewItemProvider != null) systemLandscapeViewItemProvider.dispose();
		if (systemContextViewItemProvider != null) systemContextViewItemProvider.dispose();
		if (containerViewItemProvider != null) containerViewItemProvider.dispose();
		if (componentViewItemProvider != null) componentViewItemProvider.dispose();
		if (autoLayoutItemProvider != null) autoLayoutItemProvider.dispose();
		if (elementStyleItemProvider != null) elementStyleItemProvider.dispose();
		if (relationshipStyleItemProvider != null) relationshipStyleItemProvider.dispose();
		if (noFilterConditionItemProvider != null) noFilterConditionItemProvider.dispose();
		if (compositeConditionItemProvider != null) compositeConditionItemProvider.dispose();
		if (elementTagConditionItemProvider != null) elementTagConditionItemProvider.dispose();
		if (elementTechnologyConditionItemProvider != null) elementTechnologyConditionItemProvider.dispose();
		if (elementTypeConditionItemProvider != null) elementTypeConditionItemProvider.dispose();
		if (elementPropertyConditionItemProvider != null) elementPropertyConditionItemProvider.dispose();
		if (elementParentConditionItemProvider != null) elementParentConditionItemProvider.dispose();
		if (relationshipTagConditionItemProvider != null) relationshipTagConditionItemProvider.dispose();
		if (relationshipPropertyConditionItemProvider != null) relationshipPropertyConditionItemProvider.dispose();
		if (relationshipSourceConditionItemProvider != null) relationshipSourceConditionItemProvider.dispose();
		if (relationshipDestinationConditionItemProvider != null) relationshipDestinationConditionItemProvider.dispose();
	}

}

// automatically generated by Xtext
grammar structurizr.expressions.StructurizrExpressions with org.eclipse.xtext.common.Terminals

import "structurizr" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

EntryRule returns ViewElement:
	SystemLandscapeView_Include | SystemLandscapeView_Exclude | SystemContextView_Include | SystemContextView_Exclude | ContainerView_Include | ContainerView_Exclude | ComponentView_Include | ComponentView_Exclude;

SystemLandscapeView_Include returns SystemLandscapeView:
	{SystemLandscapeView}
	(include=ConditionElement)?;
	
SystemLandscapeView_Exclude returns SystemLandscapeView:
	{SystemLandscapeView}
	(exclude=ConditionElement)?;

SystemContextView_Include returns SystemContextView:
	{SystemContextView}
	(include=ConditionElement)?;
	
SystemContextView_Exclude returns SystemContextView:
	{SystemContextView}
	(exclude=ConditionElement)?;
	
ContainerView_Include returns ContainerView:
	{ContainerView}
	(include=ConditionElement)?;
	
ContainerView_Exclude returns ContainerView:
	{ContainerView}
	(exclude=ConditionElement)?;
	
ComponentView_Include returns ComponentView:
	{ComponentView}
	(include=ConditionElement)?;
	
ComponentView_Exclude returns ComponentView:
	{ComponentView}
	(exclude=ConditionElement)?;

ConditionElement returns ConditionElement:
	NoFilterCondition | FilterCondition;

NoFilterCondition returns NoFilterCondition:
	{NoFilterCondition}
	'*';

FilterCondition returns FilterCondition:
	CompositeCondition | ElementFilterCondition | RelationshipFilterCondition;
	
CompositeCondition returns CompositeCondition:
	{CompositeCondition}	
	'{' (left=FilterCondition)? logicalOperation=ConditionLogicalOperation (right=FilterCondition)? '}';

ElementFilterCondition returns ElementFilterCondition:		
	ElementTagCondition | ElementTechnologyCondition | ElementTypeCondition | ElementPropertyCondition | ElementParentCondition;

RelationshipFilterCondition returns RelationshipFilterCondition:		
	RelationshipTagCondition | RelationshipPropertyCondition | RelationshipSourceCondition | RelationshipDestinationCondition;

ElementTagCondition returns ElementTagCondition:
	{ElementTagCondition}
	'(' 'element' '.' 'tag' comparisonOperation=ConditionComparisonOperation (tags+=[Tag] (',' tags+=[Tag])*)? ')';

ElementTechnologyCondition returns ElementTechnologyCondition:
	{ElementTechnologyCondition}
	'(' 'element' '.' 'technology' comparisonOperation=ConditionComparisonOperation (technology=[Technology])? ')';

ElementTypeCondition returns ElementTypeCondition:
	{ElementTypeCondition}
	'(' 'element' '.' 'type' comparisonOperation=ConditionComparisonOperation (type=FilterType)? ')';

ElementPropertyCondition returns ElementPropertyCondition:
	{ElementPropertyCondition}
	'(' 'element' '.' 'properties' '[' (property=[Property])? ']' comparisonOperation=ConditionComparisonOperation (value=EString)? ')';

ElementParentCondition returns ElementParentCondition:
	{ElementParentCondition}
	'(' 'element' '.' 'parent' comparisonOperation=ConditionComparisonOperation (parent=[IdentifiableElement])? ')';

RelationshipTagCondition returns RelationshipTagCondition:
	{RelationshipTagCondition}
	'(' 'relationship' '.' 'tag' comparisonOperation=ConditionComparisonOperation (tags+=[Tag] (',' tags+=[Tag])*)? ')';

RelationshipPropertyCondition returns RelationshipPropertyCondition:
	{RelationshipPropertyCondition}
	'(' 'relationship' '.' 'properties' '[' (property=[Property])? ']' comparisonOperation=ConditionComparisonOperation (value=EString)? ')';

RelationshipSourceCondition returns RelationshipSourceCondition:
	{RelationshipSourceCondition}
	'(' 'relationship' '.' 'source' comparisonOperation=ConditionComparisonOperation (source=[IdentifiableElement])? ')';

RelationshipDestinationCondition returns RelationshipDestinationCondition:
	{RelationshipDestinationCondition}
	'(' 'relationship' '.' 'destination' comparisonOperation=ConditionComparisonOperation (destination=[IdentifiableElement])? ')';


enum ConditionLogicalOperation returns ConditionLogicalOperation:
				AND = '&&' | OR = '||';

enum ConditionComparisonOperation returns ConditionComparisonOperation:
				EQUALS = '==' | NOT_EQUALS = '!=';

enum FilterType returns FilterType:
				Person = 'Person' | SoftwareSystem = 'SoftwareSystem' | Container = 'Container' | Component = 'Component' | DeploymentNode = 'DeploymentNode';

EString returns ecore::EString:
	STRING | ID;
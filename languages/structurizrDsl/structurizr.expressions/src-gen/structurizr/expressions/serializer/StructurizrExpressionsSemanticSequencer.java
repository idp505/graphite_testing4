/*
 * generated by Xtext 2.36.0
 */
package structurizr.expressions.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import structurizr.ComponentView;
import structurizr.CompositeCondition;
import structurizr.ContainerView;
import structurizr.ElementParentCondition;
import structurizr.ElementPropertyCondition;
import structurizr.ElementTagCondition;
import structurizr.ElementTechnologyCondition;
import structurizr.ElementTypeCondition;
import structurizr.NoFilterCondition;
import structurizr.RelationshipDestinationCondition;
import structurizr.RelationshipPropertyCondition;
import structurizr.RelationshipSourceCondition;
import structurizr.RelationshipTagCondition;
import structurizr.StructurizrPackage;
import structurizr.SystemContextView;
import structurizr.SystemLandscapeView;
import structurizr.expressions.services.StructurizrExpressionsGrammarAccess;

@SuppressWarnings("all")
public class StructurizrExpressionsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private StructurizrExpressionsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StructurizrPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StructurizrPackage.COMPONENT_VIEW:
				if (rule == grammarAccess.getComponentView_ExcludeRule()) {
					sequence_ComponentView_Exclude(context, (ComponentView) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEntryRuleRule()) {
					sequence_ComponentView_Exclude_ComponentView_Include(context, (ComponentView) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getComponentView_IncludeRule()) {
					sequence_ComponentView_Include(context, (ComponentView) semanticObject); 
					return; 
				}
				else break;
			case StructurizrPackage.COMPOSITE_CONDITION:
				sequence_CompositeCondition(context, (CompositeCondition) semanticObject); 
				return; 
			case StructurizrPackage.CONTAINER_VIEW:
				if (rule == grammarAccess.getContainerView_ExcludeRule()) {
					sequence_ContainerView_Exclude(context, (ContainerView) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEntryRuleRule()) {
					sequence_ContainerView_Exclude_ContainerView_Include(context, (ContainerView) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getContainerView_IncludeRule()) {
					sequence_ContainerView_Include(context, (ContainerView) semanticObject); 
					return; 
				}
				else break;
			case StructurizrPackage.ELEMENT_PARENT_CONDITION:
				sequence_ElementParentCondition(context, (ElementParentCondition) semanticObject); 
				return; 
			case StructurizrPackage.ELEMENT_PROPERTY_CONDITION:
				sequence_ElementPropertyCondition(context, (ElementPropertyCondition) semanticObject); 
				return; 
			case StructurizrPackage.ELEMENT_TAG_CONDITION:
				sequence_ElementTagCondition(context, (ElementTagCondition) semanticObject); 
				return; 
			case StructurizrPackage.ELEMENT_TECHNOLOGY_CONDITION:
				sequence_ElementTechnologyCondition(context, (ElementTechnologyCondition) semanticObject); 
				return; 
			case StructurizrPackage.ELEMENT_TYPE_CONDITION:
				sequence_ElementTypeCondition(context, (ElementTypeCondition) semanticObject); 
				return; 
			case StructurizrPackage.NO_FILTER_CONDITION:
				sequence_NoFilterCondition(context, (NoFilterCondition) semanticObject); 
				return; 
			case StructurizrPackage.RELATIONSHIP_DESTINATION_CONDITION:
				sequence_RelationshipDestinationCondition(context, (RelationshipDestinationCondition) semanticObject); 
				return; 
			case StructurizrPackage.RELATIONSHIP_PROPERTY_CONDITION:
				sequence_RelationshipPropertyCondition(context, (RelationshipPropertyCondition) semanticObject); 
				return; 
			case StructurizrPackage.RELATIONSHIP_SOURCE_CONDITION:
				sequence_RelationshipSourceCondition(context, (RelationshipSourceCondition) semanticObject); 
				return; 
			case StructurizrPackage.RELATIONSHIP_TAG_CONDITION:
				sequence_RelationshipTagCondition(context, (RelationshipTagCondition) semanticObject); 
				return; 
			case StructurizrPackage.SYSTEM_CONTEXT_VIEW:
				if (rule == grammarAccess.getSystemContextView_ExcludeRule()) {
					sequence_SystemContextView_Exclude(context, (SystemContextView) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEntryRuleRule()) {
					sequence_SystemContextView_Exclude_SystemContextView_Include(context, (SystemContextView) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemContextView_IncludeRule()) {
					sequence_SystemContextView_Include(context, (SystemContextView) semanticObject); 
					return; 
				}
				else break;
			case StructurizrPackage.SYSTEM_LANDSCAPE_VIEW:
				if (rule == grammarAccess.getSystemLandscapeView_ExcludeRule()) {
					sequence_SystemLandscapeView_Exclude(context, (SystemLandscapeView) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEntryRuleRule()) {
					sequence_SystemLandscapeView_Exclude_SystemLandscapeView_Include(context, (SystemLandscapeView) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSystemLandscapeView_IncludeRule()) {
					sequence_SystemLandscapeView_Include(context, (SystemLandscapeView) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ComponentView_Exclude returns ComponentView
	 *
	 * Constraint:
	 *     exclude=ConditionElement?
	 * </pre>
	 */
	protected void sequence_ComponentView_Exclude(ISerializationContext context, ComponentView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EntryRule returns ComponentView
	 *
	 * Constraint:
	 *     (include=ConditionElement | exclude=ConditionElement)?
	 * </pre>
	 */
	protected void sequence_ComponentView_Exclude_ComponentView_Include(ISerializationContext context, ComponentView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ComponentView_Include returns ComponentView
	 *
	 * Constraint:
	 *     include=ConditionElement?
	 * </pre>
	 */
	protected void sequence_ComponentView_Include(ISerializationContext context, ComponentView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionElement returns CompositeCondition
	 *     FilterCondition returns CompositeCondition
	 *     CompositeCondition returns CompositeCondition
	 *
	 * Constraint:
	 *     (left=FilterCondition? logicalOperation=ConditionLogicalOperation right=FilterCondition?)
	 * </pre>
	 */
	protected void sequence_CompositeCondition(ISerializationContext context, CompositeCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ContainerView_Exclude returns ContainerView
	 *
	 * Constraint:
	 *     exclude=ConditionElement?
	 * </pre>
	 */
	protected void sequence_ContainerView_Exclude(ISerializationContext context, ContainerView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EntryRule returns ContainerView
	 *
	 * Constraint:
	 *     (include=ConditionElement | exclude=ConditionElement)?
	 * </pre>
	 */
	protected void sequence_ContainerView_Exclude_ContainerView_Include(ISerializationContext context, ContainerView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ContainerView_Include returns ContainerView
	 *
	 * Constraint:
	 *     include=ConditionElement?
	 * </pre>
	 */
	protected void sequence_ContainerView_Include(ISerializationContext context, ContainerView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionElement returns ElementParentCondition
	 *     FilterCondition returns ElementParentCondition
	 *     ElementFilterCondition returns ElementParentCondition
	 *     ElementParentCondition returns ElementParentCondition
	 *
	 * Constraint:
	 *     (comparisonOperation=ConditionComparisonOperation parent=[IdentifiableElement|ID]?)
	 * </pre>
	 */
	protected void sequence_ElementParentCondition(ISerializationContext context, ElementParentCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionElement returns ElementPropertyCondition
	 *     FilterCondition returns ElementPropertyCondition
	 *     ElementFilterCondition returns ElementPropertyCondition
	 *     ElementPropertyCondition returns ElementPropertyCondition
	 *
	 * Constraint:
	 *     (property=[Property|ID]? comparisonOperation=ConditionComparisonOperation value=EString?)
	 * </pre>
	 */
	protected void sequence_ElementPropertyCondition(ISerializationContext context, ElementPropertyCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionElement returns ElementTagCondition
	 *     FilterCondition returns ElementTagCondition
	 *     ElementFilterCondition returns ElementTagCondition
	 *     ElementTagCondition returns ElementTagCondition
	 *
	 * Constraint:
	 *     (comparisonOperation=ConditionComparisonOperation (tags+=[Tag|ID] tags+=[Tag|ID]*)?)
	 * </pre>
	 */
	protected void sequence_ElementTagCondition(ISerializationContext context, ElementTagCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionElement returns ElementTechnologyCondition
	 *     FilterCondition returns ElementTechnologyCondition
	 *     ElementFilterCondition returns ElementTechnologyCondition
	 *     ElementTechnologyCondition returns ElementTechnologyCondition
	 *
	 * Constraint:
	 *     (comparisonOperation=ConditionComparisonOperation technology=[Technology|ID]?)
	 * </pre>
	 */
	protected void sequence_ElementTechnologyCondition(ISerializationContext context, ElementTechnologyCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionElement returns ElementTypeCondition
	 *     FilterCondition returns ElementTypeCondition
	 *     ElementFilterCondition returns ElementTypeCondition
	 *     ElementTypeCondition returns ElementTypeCondition
	 *
	 * Constraint:
	 *     (comparisonOperation=ConditionComparisonOperation type=FilterType?)
	 * </pre>
	 */
	protected void sequence_ElementTypeCondition(ISerializationContext context, ElementTypeCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionElement returns NoFilterCondition
	 *     NoFilterCondition returns NoFilterCondition
	 *
	 * Constraint:
	 *     {NoFilterCondition}
	 * </pre>
	 */
	protected void sequence_NoFilterCondition(ISerializationContext context, NoFilterCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionElement returns RelationshipDestinationCondition
	 *     FilterCondition returns RelationshipDestinationCondition
	 *     RelationshipFilterCondition returns RelationshipDestinationCondition
	 *     RelationshipDestinationCondition returns RelationshipDestinationCondition
	 *
	 * Constraint:
	 *     (comparisonOperation=ConditionComparisonOperation destination=[IdentifiableElement|ID]?)
	 * </pre>
	 */
	protected void sequence_RelationshipDestinationCondition(ISerializationContext context, RelationshipDestinationCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionElement returns RelationshipPropertyCondition
	 *     FilterCondition returns RelationshipPropertyCondition
	 *     RelationshipFilterCondition returns RelationshipPropertyCondition
	 *     RelationshipPropertyCondition returns RelationshipPropertyCondition
	 *
	 * Constraint:
	 *     (property=[Property|ID]? comparisonOperation=ConditionComparisonOperation value=EString?)
	 * </pre>
	 */
	protected void sequence_RelationshipPropertyCondition(ISerializationContext context, RelationshipPropertyCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionElement returns RelationshipSourceCondition
	 *     FilterCondition returns RelationshipSourceCondition
	 *     RelationshipFilterCondition returns RelationshipSourceCondition
	 *     RelationshipSourceCondition returns RelationshipSourceCondition
	 *
	 * Constraint:
	 *     (comparisonOperation=ConditionComparisonOperation source=[IdentifiableElement|ID]?)
	 * </pre>
	 */
	protected void sequence_RelationshipSourceCondition(ISerializationContext context, RelationshipSourceCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConditionElement returns RelationshipTagCondition
	 *     FilterCondition returns RelationshipTagCondition
	 *     RelationshipFilterCondition returns RelationshipTagCondition
	 *     RelationshipTagCondition returns RelationshipTagCondition
	 *
	 * Constraint:
	 *     (comparisonOperation=ConditionComparisonOperation (tags+=[Tag|ID] tags+=[Tag|ID]*)?)
	 * </pre>
	 */
	protected void sequence_RelationshipTagCondition(ISerializationContext context, RelationshipTagCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SystemContextView_Exclude returns SystemContextView
	 *
	 * Constraint:
	 *     exclude=ConditionElement?
	 * </pre>
	 */
	protected void sequence_SystemContextView_Exclude(ISerializationContext context, SystemContextView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EntryRule returns SystemContextView
	 *
	 * Constraint:
	 *     (include=ConditionElement | exclude=ConditionElement)?
	 * </pre>
	 */
	protected void sequence_SystemContextView_Exclude_SystemContextView_Include(ISerializationContext context, SystemContextView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SystemContextView_Include returns SystemContextView
	 *
	 * Constraint:
	 *     include=ConditionElement?
	 * </pre>
	 */
	protected void sequence_SystemContextView_Include(ISerializationContext context, SystemContextView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SystemLandscapeView_Exclude returns SystemLandscapeView
	 *
	 * Constraint:
	 *     exclude=ConditionElement?
	 * </pre>
	 */
	protected void sequence_SystemLandscapeView_Exclude(ISerializationContext context, SystemLandscapeView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EntryRule returns SystemLandscapeView
	 *
	 * Constraint:
	 *     (include=ConditionElement | exclude=ConditionElement)?
	 * </pre>
	 */
	protected void sequence_SystemLandscapeView_Exclude_SystemLandscapeView_Include(ISerializationContext context, SystemLandscapeView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SystemLandscapeView_Include returns SystemLandscapeView
	 *
	 * Constraint:
	 *     include=ConditionElement?
	 * </pre>
	 */
	protected void sequence_SystemLandscapeView_Include(ISerializationContext context, SystemLandscapeView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

/*
 * generated by Xtext 2.36.0
 */
package structurizr.expressions.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import structurizr.expressions.ide.contentassist.antlr.internal.InternalStructurizrExpressionsParser;
import structurizr.expressions.services.StructurizrExpressionsGrammarAccess;

public class StructurizrExpressionsParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(StructurizrExpressionsGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, StructurizrExpressionsGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEntryRuleAccess().getAlternatives(), "rule__EntryRule__Alternatives");
			builder.put(grammarAccess.getConditionElementAccess().getAlternatives(), "rule__ConditionElement__Alternatives");
			builder.put(grammarAccess.getFilterConditionAccess().getAlternatives(), "rule__FilterCondition__Alternatives");
			builder.put(grammarAccess.getElementFilterConditionAccess().getAlternatives(), "rule__ElementFilterCondition__Alternatives");
			builder.put(grammarAccess.getRelationshipFilterConditionAccess().getAlternatives(), "rule__RelationshipFilterCondition__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getConditionLogicalOperationAccess().getAlternatives(), "rule__ConditionLogicalOperation__Alternatives");
			builder.put(grammarAccess.getConditionComparisonOperationAccess().getAlternatives(), "rule__ConditionComparisonOperation__Alternatives");
			builder.put(grammarAccess.getFilterTypeAccess().getAlternatives(), "rule__FilterType__Alternatives");
			builder.put(grammarAccess.getSystemLandscapeView_IncludeAccess().getGroup(), "rule__SystemLandscapeView_Include__Group__0");
			builder.put(grammarAccess.getSystemLandscapeView_ExcludeAccess().getGroup(), "rule__SystemLandscapeView_Exclude__Group__0");
			builder.put(grammarAccess.getSystemContextView_IncludeAccess().getGroup(), "rule__SystemContextView_Include__Group__0");
			builder.put(grammarAccess.getSystemContextView_ExcludeAccess().getGroup(), "rule__SystemContextView_Exclude__Group__0");
			builder.put(grammarAccess.getContainerView_IncludeAccess().getGroup(), "rule__ContainerView_Include__Group__0");
			builder.put(grammarAccess.getContainerView_ExcludeAccess().getGroup(), "rule__ContainerView_Exclude__Group__0");
			builder.put(grammarAccess.getComponentView_IncludeAccess().getGroup(), "rule__ComponentView_Include__Group__0");
			builder.put(grammarAccess.getComponentView_ExcludeAccess().getGroup(), "rule__ComponentView_Exclude__Group__0");
			builder.put(grammarAccess.getNoFilterConditionAccess().getGroup(), "rule__NoFilterCondition__Group__0");
			builder.put(grammarAccess.getCompositeConditionAccess().getGroup(), "rule__CompositeCondition__Group__0");
			builder.put(grammarAccess.getElementTagConditionAccess().getGroup(), "rule__ElementTagCondition__Group__0");
			builder.put(grammarAccess.getElementTagConditionAccess().getGroup_6(), "rule__ElementTagCondition__Group_6__0");
			builder.put(grammarAccess.getElementTagConditionAccess().getGroup_6_1(), "rule__ElementTagCondition__Group_6_1__0");
			builder.put(grammarAccess.getElementTechnologyConditionAccess().getGroup(), "rule__ElementTechnologyCondition__Group__0");
			builder.put(grammarAccess.getElementTypeConditionAccess().getGroup(), "rule__ElementTypeCondition__Group__0");
			builder.put(grammarAccess.getElementPropertyConditionAccess().getGroup(), "rule__ElementPropertyCondition__Group__0");
			builder.put(grammarAccess.getElementParentConditionAccess().getGroup(), "rule__ElementParentCondition__Group__0");
			builder.put(grammarAccess.getRelationshipTagConditionAccess().getGroup(), "rule__RelationshipTagCondition__Group__0");
			builder.put(grammarAccess.getRelationshipTagConditionAccess().getGroup_6(), "rule__RelationshipTagCondition__Group_6__0");
			builder.put(grammarAccess.getRelationshipTagConditionAccess().getGroup_6_1(), "rule__RelationshipTagCondition__Group_6_1__0");
			builder.put(grammarAccess.getRelationshipPropertyConditionAccess().getGroup(), "rule__RelationshipPropertyCondition__Group__0");
			builder.put(grammarAccess.getRelationshipSourceConditionAccess().getGroup(), "rule__RelationshipSourceCondition__Group__0");
			builder.put(grammarAccess.getRelationshipDestinationConditionAccess().getGroup(), "rule__RelationshipDestinationCondition__Group__0");
			builder.put(grammarAccess.getSystemLandscapeView_IncludeAccess().getIncludeAssignment_1(), "rule__SystemLandscapeView_Include__IncludeAssignment_1");
			builder.put(grammarAccess.getSystemLandscapeView_ExcludeAccess().getExcludeAssignment_1(), "rule__SystemLandscapeView_Exclude__ExcludeAssignment_1");
			builder.put(grammarAccess.getSystemContextView_IncludeAccess().getIncludeAssignment_1(), "rule__SystemContextView_Include__IncludeAssignment_1");
			builder.put(grammarAccess.getSystemContextView_ExcludeAccess().getExcludeAssignment_1(), "rule__SystemContextView_Exclude__ExcludeAssignment_1");
			builder.put(grammarAccess.getContainerView_IncludeAccess().getIncludeAssignment_1(), "rule__ContainerView_Include__IncludeAssignment_1");
			builder.put(grammarAccess.getContainerView_ExcludeAccess().getExcludeAssignment_1(), "rule__ContainerView_Exclude__ExcludeAssignment_1");
			builder.put(grammarAccess.getComponentView_IncludeAccess().getIncludeAssignment_1(), "rule__ComponentView_Include__IncludeAssignment_1");
			builder.put(grammarAccess.getComponentView_ExcludeAccess().getExcludeAssignment_1(), "rule__ComponentView_Exclude__ExcludeAssignment_1");
			builder.put(grammarAccess.getCompositeConditionAccess().getLeftAssignment_2(), "rule__CompositeCondition__LeftAssignment_2");
			builder.put(grammarAccess.getCompositeConditionAccess().getLogicalOperationAssignment_3(), "rule__CompositeCondition__LogicalOperationAssignment_3");
			builder.put(grammarAccess.getCompositeConditionAccess().getRightAssignment_4(), "rule__CompositeCondition__RightAssignment_4");
			builder.put(grammarAccess.getElementTagConditionAccess().getComparisonOperationAssignment_5(), "rule__ElementTagCondition__ComparisonOperationAssignment_5");
			builder.put(grammarAccess.getElementTagConditionAccess().getTagsAssignment_6_0(), "rule__ElementTagCondition__TagsAssignment_6_0");
			builder.put(grammarAccess.getElementTagConditionAccess().getTagsAssignment_6_1_1(), "rule__ElementTagCondition__TagsAssignment_6_1_1");
			builder.put(grammarAccess.getElementTechnologyConditionAccess().getComparisonOperationAssignment_5(), "rule__ElementTechnologyCondition__ComparisonOperationAssignment_5");
			builder.put(grammarAccess.getElementTechnologyConditionAccess().getTechnologyAssignment_6(), "rule__ElementTechnologyCondition__TechnologyAssignment_6");
			builder.put(grammarAccess.getElementTypeConditionAccess().getComparisonOperationAssignment_5(), "rule__ElementTypeCondition__ComparisonOperationAssignment_5");
			builder.put(grammarAccess.getElementTypeConditionAccess().getTypeAssignment_6(), "rule__ElementTypeCondition__TypeAssignment_6");
			builder.put(grammarAccess.getElementPropertyConditionAccess().getPropertyAssignment_6(), "rule__ElementPropertyCondition__PropertyAssignment_6");
			builder.put(grammarAccess.getElementPropertyConditionAccess().getComparisonOperationAssignment_8(), "rule__ElementPropertyCondition__ComparisonOperationAssignment_8");
			builder.put(grammarAccess.getElementPropertyConditionAccess().getValueAssignment_9(), "rule__ElementPropertyCondition__ValueAssignment_9");
			builder.put(grammarAccess.getElementParentConditionAccess().getComparisonOperationAssignment_5(), "rule__ElementParentCondition__ComparisonOperationAssignment_5");
			builder.put(grammarAccess.getElementParentConditionAccess().getParentAssignment_6(), "rule__ElementParentCondition__ParentAssignment_6");
			builder.put(grammarAccess.getRelationshipTagConditionAccess().getComparisonOperationAssignment_5(), "rule__RelationshipTagCondition__ComparisonOperationAssignment_5");
			builder.put(grammarAccess.getRelationshipTagConditionAccess().getTagsAssignment_6_0(), "rule__RelationshipTagCondition__TagsAssignment_6_0");
			builder.put(grammarAccess.getRelationshipTagConditionAccess().getTagsAssignment_6_1_1(), "rule__RelationshipTagCondition__TagsAssignment_6_1_1");
			builder.put(grammarAccess.getRelationshipPropertyConditionAccess().getPropertyAssignment_6(), "rule__RelationshipPropertyCondition__PropertyAssignment_6");
			builder.put(grammarAccess.getRelationshipPropertyConditionAccess().getComparisonOperationAssignment_8(), "rule__RelationshipPropertyCondition__ComparisonOperationAssignment_8");
			builder.put(grammarAccess.getRelationshipPropertyConditionAccess().getValueAssignment_9(), "rule__RelationshipPropertyCondition__ValueAssignment_9");
			builder.put(grammarAccess.getRelationshipSourceConditionAccess().getComparisonOperationAssignment_5(), "rule__RelationshipSourceCondition__ComparisonOperationAssignment_5");
			builder.put(grammarAccess.getRelationshipSourceConditionAccess().getSourceAssignment_6(), "rule__RelationshipSourceCondition__SourceAssignment_6");
			builder.put(grammarAccess.getRelationshipDestinationConditionAccess().getComparisonOperationAssignment_5(), "rule__RelationshipDestinationCondition__ComparisonOperationAssignment_5");
			builder.put(grammarAccess.getRelationshipDestinationConditionAccess().getDestinationAssignment_6(), "rule__RelationshipDestinationCondition__DestinationAssignment_6");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private StructurizrExpressionsGrammarAccess grammarAccess;

	@Override
	protected InternalStructurizrExpressionsParser createParser() {
		InternalStructurizrExpressionsParser result = new InternalStructurizrExpressionsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public StructurizrExpressionsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(StructurizrExpressionsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
